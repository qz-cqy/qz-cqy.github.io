<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://blog.ak-ioi.cf</id>
    <title>rui_er 的博客</title>
    <updated>2020-04-24T12:05:30.712Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://blog.ak-ioi.cf"/>
    <link rel="self" href="https://blog.ak-ioi.cf/atom.xml"/>
    <subtitle>三思而后码</subtitle>
    <logo>https://blog.ak-ioi.cf/images/avatar.png</logo>
    <icon>https://blog.ak-ioi.cf/favicon.ico</icon>
    <rights>All rights reserved 2020, rui_er 的博客</rights>
    <entry>
        <title type="html"><![CDATA[截 图 鬼 才]]></title>
        <id>https://blog.ak-ioi.cf/post/jie-tu-gui-cai/</id>
        <link href="https://blog.ak-ioi.cf/post/jie-tu-gui-cai/">
        </link>
        <updated>2020-04-24T03:19:12.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://cdn.luogu.com.cn/upload/image_hosting/z0f4av3z.png" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="2"><img src="https://cdn.luogu.com.cn/upload/image_hosting/9sgvon60.png" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="3"><img src="https://cdn.luogu.com.cn/upload/image_hosting/dlqd7zth.png" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="4"><img src="https://cdn.luogu.com.cn/upload/image_hosting/ew69di7g.png" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="5"><img src="https://cdn.luogu.com.cn/upload/image_hosting/39yqt70z.png" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="6"><img src="https://cdn.luogu.com.cn/upload/image_hosting/ck03g1hl.png" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="7"><img src="https://cdn.luogu.com.cn/upload/image_hosting/qgm4kp7v.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[新年+年中愿望集合]]></title>
        <id>https://blog.ak-ioi.cf/post/new-year-mid-year/</id>
        <link href="https://blog.ak-ioi.cf/post/new-year-mid-year/">
        </link>
        <updated>2020-04-14T06:28:18.000Z</updated>
        <content type="html"><![CDATA[<ul>
<li><a href="/post/mid-year-2020">2020年中</a></li>
<li><a href="/post/new-year-2020">2020新年</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[年中愿望2020]]></title>
        <id>https://blog.ak-ioi.cf/post/mid-year-2020/</id>
        <link href="https://blog.ak-ioi.cf/post/mid-year-2020/">
        </link>
        <updated>2020-04-14T06:26:12.000Z</updated>
        <content type="html"><![CDATA[<p><s>xcs你也履行flag！（bushi</s></p>
<p>备注：接：新年愿望2020</p>
<p>忽略上面，下面是真的：</p>
<p>2020年在洛谷总AC数达到 1&lt;&lt;10</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[题解 CF1332A@洛谷 | 1332A@Codeforces 【Exercising Walk】]]></title>
        <id>https://blog.ak-ioi.cf/post/solution-luogu-cf1332a-codeforces-1332a/</id>
        <link href="https://blog.ak-ioi.cf/post/solution-luogu-cf1332a-codeforces-1332a/">
        </link>
        <updated>2020-04-03T02:26:38.000Z</updated>
        <content type="html"><![CDATA[<p>这题大概就是把不行的条件判掉，剩下的都是可以的。</p>
<p>首先，因为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo>+</mo><mi>b</mi><mo>+</mo><mi>c</mi><mo>+</mo><mi>d</mi><mo>≥</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">a+b+c+d\geq 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">c</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83041em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>，所以 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mn>1</mn></msub><mo>=</mo><msub><mi>x</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">x_1=x_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 且 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>y</mi><mn>1</mn></msub><mo>=</mo><msub><mi>y</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">y_1=y_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 的显然不行。</p>
<p>其次，如果一个方向上不能走，即 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mn>1</mn></msub><mo>=</mo><msub><mi>x</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">x_1=x_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 或 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>y</mi><mn>1</mn></msub><mo>=</mo><msub><mi>y</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">y_1=y_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，且那个方向要走的步数不为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>，这种情况也不行。</p>
<p>然后，因为反方向可以相互抵消（左→右回到原位），可以先把反方向减去它们的最小值，然后判断空间是否足够即可。</p>
<p>完整代码：</p>
<pre><code class="language-cpp">//By: Luogu@rui_er(122461)
#include &lt;bits/stdc++.h&gt;
using namespace std;

int T;
int a, b, c, d, x, y, x1, y1, x2, y2; 

int main()
{
	cin&gt;&gt;T;
	while(T--)
	{
		a = b = c = d = x = y = x1 = y1 = x2 = y2 = 0;
		cin&gt;&gt;a&gt;&gt;b&gt;&gt;c&gt;&gt;d&gt;&gt;x&gt;&gt;y&gt;&gt;x1&gt;&gt;y1&gt;&gt;x2&gt;&gt;y2;
		if(x1 == x2 &amp;&amp; y1 == y2)
		{
			cout&lt;&lt;&quot;No&quot;&lt;&lt;endl;
			continue;
		}
		if(x1 == x2 &amp;&amp; (a || b))
		{
			cout&lt;&lt;&quot;No&quot;&lt;&lt;endl;
			continue;
		}
		if(y1 == y2 &amp;&amp; (c || d))
		{
			cout&lt;&lt;&quot;No&quot;&lt;&lt;endl;
			continue;
		}
		int tmp = min(a, b);
		a -= tmp;
		b -= tmp;
		tmp = min(c, d);
		c -= tmp;
		d -= tmp;
		if(x - x1 &lt; a || x2 - x &lt; b || y - y1 &lt; c || y2 - y &lt; d)
		{
			cout&lt;&lt;&quot;No&quot;&lt;&lt;endl;
			continue;
		}
		cout&lt;&lt;&quot;Yes&quot;&lt;&lt;endl;
	}
	return 0;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[【重要】文章转载须知（2020年4月3日更新，许可协议改变，请务必注意）[TOP]]]></title>
        <id>https://blog.ak-ioi.cf/post/zhuan-zai/</id>
        <link href="https://blog.ak-ioi.cf/post/zhuan-zai/">
        </link>
        <updated>2020-04-02T05:34:17.000Z</updated>
        <content type="html"><![CDATA[<p>此博客所有文章（除特殊说明外）均采用<a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh">署名-非商业性使用-相同方式共享 4.0 国际 (CC BY-NC-SA 4.0) </a>许可协议。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[2020愚人节名字颜色变化]]></title>
        <id>https://blog.ak-ioi.cf/post/2020-april-fool/</id>
        <link href="https://blog.ak-ioi.cf/post/2020-april-fool/">
        </link>
        <updated>2020-04-01T00:42:26.000Z</updated>
        <content type="html"><![CDATA[<table>
<thead>
<tr>
<th style="text-align:center">时间</th>
<th style="text-align:center">大号@rui_er</th>
<th style="text-align:center">小号@akioi</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">实际</td>
<td style="text-align:center">橙</td>
<td style="text-align:center">蓝</td>
</tr>
<tr>
<td style="text-align:center">0:00</td>
<td style="text-align:center">*</td>
<td style="text-align:center">*</td>
</tr>
<tr>
<td style="text-align:center">1:00</td>
<td style="text-align:center">*</td>
<td style="text-align:center">*</td>
</tr>
<tr>
<td style="text-align:center">2:00</td>
<td style="text-align:center">*</td>
<td style="text-align:center">*</td>
</tr>
<tr>
<td style="text-align:center">3:00</td>
<td style="text-align:center">*</td>
<td style="text-align:center">*</td>
</tr>
<tr>
<td style="text-align:center">4:00</td>
<td style="text-align:center">*</td>
<td style="text-align:center">*</td>
</tr>
<tr>
<td style="text-align:center">5:00</td>
<td style="text-align:center">*</td>
<td style="text-align:center">*</td>
</tr>
<tr>
<td style="text-align:center">6:00</td>
<td style="text-align:center">*</td>
<td style="text-align:center">*</td>
</tr>
<tr>
<td style="text-align:center">7:00</td>
<td style="text-align:center">橙</td>
<td style="text-align:center">*</td>
</tr>
<tr>
<td style="text-align:center">8:00</td>
<td style="text-align:center">红</td>
<td style="text-align:center">橙</td>
</tr>
<tr>
<td style="text-align:center">9:00</td>
<td style="text-align:center">灰</td>
<td style="text-align:center">蓝</td>
</tr>
<tr>
<td style="text-align:center">10:00</td>
<td style="text-align:center">绿</td>
<td style="text-align:center">灰</td>
</tr>
<tr>
<td style="text-align:center">11:00</td>
<td style="text-align:center">橙</td>
<td style="text-align:center">灰</td>
</tr>
<tr>
<td style="text-align:center">12:00换色结束</td>
<td style="text-align:center">橙</td>
<td style="text-align:center">蓝</td>
</tr>
</tbody>
</table>
<p>注：*表示没看</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[【REOI2020R1】rui_er的水题大赛赛后题解&总结]]></title>
        <id>https://blog.ak-ioi.cf/post/reoi2020r1-solution/</id>
        <link href="https://blog.ak-ioi.cf/post/reoi2020r1-solution/">
        </link>
        <updated>2020-03-31T10:57:16.000Z</updated>
        <content type="html"><![CDATA[<h1 id="文章同步发布于洛谷博客">文章同步发布于<a href="https://www.luogu.com.cn/blog/ak-ioi/reoi2020r1">洛谷博客</a></h1>
<h1 id="1-赛后总结与奖项公示">1 赛后总结与奖项公示</h1>
<p>封榜统计时排名（截图）：<img src="https://cdn.luogu.com.cn/upload/image_hosting/rk798owp.png" alt="" loading="lazy"></p>
<p>比赛报名选手：87 人。</p>
<p>有提交记录选手：18 人。</p>
<p>AK选手：1 人。</p>
<p>下面为奖项统计。</p>
<h2 id="11-全场首a">1.1 全场首A</h2>
<p>恭喜 @wzm2007 获得全场首A，赢得￥0.3！</p>
<h2 id="12-每题首a">1.2 每题首A</h2>
<p>恭喜 @wzm2007 获得A题首A，赢得￥0.1！</p>
<p>恭喜 @henrytb 获得B题首A，赢得￥0.1！</p>
<p>恭喜 @henrytb 获得C题首A，赢得￥0.1！</p>
<p>恭喜 @henrytb 获得D题首A，赢得￥0.1！</p>
<p>恭喜 @henrytb 获得E题首A，赢得￥0.1！</p>
<p>恭喜 @henrytb 获得F题首A，赢得￥0.1！</p>
<h2 id="13-全场ak与奖励补足">1.3 全场AK与奖励补足</h2>
<p>恭喜 @henrytb 获得全场AK，赢得￥0.5！</p>
<p>AK人数补足，剩余两个奖励名额按照规则顺延，恭喜 @AC_Automation 和 @happydef 获得顺延奖励每人￥0.5！</p>
<h2 id="14-bc最优解">1.4 BC最优解</h2>
<p>由于B题只有 @henrytb AC，恭喜他获得最优解，赢得￥0.2！</p>
<p>由于C题只有 @henrytb AC，恭喜他获得最优解，赢得￥0.2！</p>
<h2 id="15-幸运奖">1.5 幸运奖</h2>
<p>从全场有提交记录选手中随机抽取，恭喜 @蒟蒻跟风侠 赢得￥0.3！</p>
<h2 id="16-赛后新增奖项">1.6 赛后新增奖项</h2>
<h3 id="161-爆踩std">1.6.1 爆踩std</h3>
<p>由于 @henrytb 六道题全部AC并且程序全部爆踩std，rui_er决定给予特别奖励￥0.2！</p>
<h3 id="162-幸运奖-2">1.6.2 幸运奖-2</h3>
<p>由于rui_er认为只设置一个幸运奖有点少，于是设立了幸运二等奖（￥0.2），恭喜 @拥抱渴望者 赢得￥0.2！</p>
<p><strong>请上述获奖选手于 2020 年 4 月 15 日前私信 rui_er 微信号，或者付款二维码，逾期奖项自动作废！</strong></p>
<h1 id="2-赛后题解">2 赛后题解</h1>
<h2 id="21-a题">2.1 A题</h2>
<p>题目描述</p>
<pre><code class="language-plain">U2FsdGVkX1/PKGHGgf9gxZXO3tzmWSQUM5hO/Z+TEB63Oj0VR9TUPO/BAbCEHnUQ13gJFWJEDZOCh8QEsHcTtw6P+yqP9uoNHOx1k08N7t/twwyV2X009ZyryU2cJjiBAiHvfOmyRkF2PoOYIaYVVIYJINEoaxQxOQym7MWilN0adltSu56agfKQeZOLd2ye0Cpe332weyDPUpVUeQ++EY7jRSz3AOjY+kEAuAwx3npxAp4DuX4eu5VZz6xdhQ==
</code></pre>
<p>显然是一串密文，利用<a href="http://encode.chahuo.com/">加密解密工具</a>多试几次，发现是RC4加密。可以解密出明文：</p>
<pre><code class="language-plain">Long long ago, there is a DALAO called rui_er. He is young, but he always AK IOI. Sometimes he also dd jxd. He is so powerful that most OIers AFO because of him. Let's % him!
</code></pre>
<p>输出即可。</p>
<h2 id="22-b题">2.2 B题</h2>
<p>使用工具画出<a href="https://www.desmos.com/calculator/i0fb4kpsf4">函数图像</a>，并列举前几个数找规律：</p>
<p>数列 0, 1, 6, 21, 55, 120</p>
<p>差分 ~, 1, 5, 15, 34, 65</p>
<p>差分 ~, ~, 4, 10, 19, 31</p>
<p>差分 ~, ~, ~, 6, 9, 12</p>
<p>差分 ~, ~, ~, ~, 3, 3</p>
<p>规律就出来了，很明显，不是吗？</p>
<p>代码：</p>
<pre><code class="language-cpp">//By: Luogu@rui_er(122461)
#include &lt;bits/stdc++.h&gt;
using namespace std;
const long long MAXN = 1000001;

long long a[MAXN] = {0, 1, 6, 21, 55, 120}, b[MAXN] = {0, 1, 5, 15, 34, 65}, c[MAXN] = {0, 0, 4, 10, 19, 31}, d[MAXN] = {0, 0, 0, 6, 9, 12};
vector&lt;long long&gt; v;

int main()
{
	long long l, r;
	cin&gt;&gt;l&gt;&gt;r;
	for(long long i=1;i&lt;=r;i++) 
	{
		if(i &lt;= 5 &amp;&amp; i &gt;= l)
		{
			v.push_back(a[i]);
			continue;
		}
		else if(i &lt;= 5) continue;
		d[i] = (d[i-1] + 3) % 998244353;
		c[i] = (c[i-1] + d[i]) % 998244353;
		b[i] = (b[i-1] + c[i]) % 998244353;
		a[i] = (a[i-1] + b[i]) % 998244353;
		if(i &gt;= l) v.push_back(a[i]);
	}
	cout&lt;&lt;v.size()&lt;&lt;endl;
	for(int i=0;i&lt;v.size();i++) cout&lt;&lt;v[i]&lt;&lt;&quot; &quot;;
	cout&lt;&lt;endl;
	return 0;
}
</code></pre>
<p>当然你也可以打表。</p>
<h2 id="23-c题">2.3 C题</h2>
<p>珂朵莉树板子题，切了切了~</p>
<p>不会珂朵莉树的点<a href="https://blog.ak-ioi.cf/post/chtholly-is-so-cute">这里</a>，想练习珂朵莉树的点<a href="https://www.luogu.com.cn/training/3592">这里</a>。</p>
<pre><code class="language-cpp">//By: Luogu@rui_er(122461)
#include &lt;bits/stdc++.h&gt;
using namespace std;
typedef long long ll;
const ll mod = 998244353LL;
const ll MAXN = 100001;

ll n, m, seed, ans;
ll a[MAXN];
struct Node
{
	ll l, r;
	mutable ll v;
	Node(ll x, ll y = -1, ll z = 0): l(x), r(y), v(z) {}
	bool operator &lt; (const Node &amp;a) const {return l &lt; a.l;}
};
typedef set&lt;Node&gt;::iterator IT;
set&lt;Node&gt; ODT;

ll rnd() 
{
	ll ret = seed;
	seed = (seed * 5 + 2) % mod;
	return ret;
}

IT split(ll pos)
{
	IT iter = ODT.lower_bound(Node(pos));
	if(iter != ODT.end() &amp;&amp; iter-&gt;l == pos) return iter;
	--iter;
	ll L = iter-&gt;l, R = iter-&gt;r, V = iter-&gt;v;
	ODT.erase(iter);
	ODT.insert(Node(L, pos-1, V));
	return ODT.insert(Node(pos, R, V)).first;
}

void upd1(ll l, ll r, ll dt)
{
	IT iterR = split(r+1), iterL = split(l);
	for(iterL;iterL!=iterR;++iterL) iterL-&gt;v *= dt;
}

void upd2(ll l, ll r)
{
	IT iterR = split(r+1), iterL = split(l);
	for(iterL;iterL!=iterR;++iterL) iterL-&gt;v = sqrt(iterL-&gt;v);
}

ll kth(ll l, ll r, ll k)
{
	vector&lt;pair&lt;ll, ll&gt; &gt; v;
	IT iterR = split(r+1), iterL = split(l);
	for(iterL;iterL!=iterR;++iterL) v.push_back(make_pair(iterL-&gt;v, iterL-&gt;r-iterL-&gt;l+1));
	sort(v.begin(), v.end());
	for(vector&lt;pair&lt;ll, ll&gt; &gt;::iterator iter=v.begin();iter!=v.end();++iter)
	{
		k -= iter-&gt;second;
		if(k &lt;= 0) return iter-&gt;first;
	}
}

void assign_val(ll l, ll r, ll w)
{
	IT iterR = split(r+1), iterL = split(l);
	ODT.erase(iterL, iterR);
	ODT.insert(Node(l, r, w));
}

int main()
{
	scanf(&quot;%lld%lld%lld&quot;, &amp;n, &amp;m, &amp;seed);
	for(ll i=1;i&lt;=n;i++)
	{
		scanf(&quot;%lld&quot;, &amp;a[i]);
		ODT.insert(Node(i, i, a[i]));
	}
	for(ll i=1;i&lt;=m;i++)
	{
		ll op = rnd() % 4 + 1;
		ll l = rnd() % n + 1;
		ll r = rnd() % n + 1;
		if(l &gt; r) swap(l, r);
		ll k;
		if(op == 1 || op == 2) k = rnd() % 5 + 1;
		else if(op == 3) k = rnd() % (r - l + 1) + 1;
		else k = rnd();
		if(op == 1) upd1(l, r, k);
		else if(op == 2) upd2(l, r);
		else if(op == 3) ans ^= kth(l, r, k);
		else assign_val(l, r, k);
	}
	printf(&quot;%lld\n&quot;, ans);
	return 0;
}
</code></pre>
<h2 id="24-d题">2.4 D题</h2>
<p>打开F12，发现题目描述“无”后面有个指向A+B Problem的链接，因为内容是空的，所以看不到。此题就是A+B，注意到数据范围写着<code>数据范围*=2</code>，会爆int，记得开long long。</p>
<pre><code class="language-cpp">//By: Luogu@rui_er(122461)
#include &lt;bits/stdc++.h&gt;
using namespace std;

long long a, b;

int main()
{
	cin&gt;&gt;a&gt;&gt;b;
	cout&lt;&lt;a+b&lt;&lt;endl;
	return 0;
}
</code></pre>
<h2 id="25-e题">2.5 E题</h2>
<p>E题是一道高中物理题，不会那也没办法了QwQ。第一问根据公式送分 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>E</mi><mi>p</mi></msub><mo>=</mo><mi>m</mi><mi>g</mi><mi>h</mi></mrow><annotation encoding="application/x-tex">E_p=mgh</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">h</span></span></span></span>。第二问根据公式 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>h</mi><mo>=</mo><mfrac><mn>1</mn><mn>2</mn></mfrac><mi>g</mi><msup><mi>t</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">h=\frac{1}{2}gt^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">h</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span>，可得 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>t</mi><mo>=</mo><msqrt><mfrac><mrow><mn>2.0</mn><mo>×</mo><mi>h</mi></mrow><mi>g</mi></mfrac></msqrt></mrow><annotation encoding="application/x-tex">t=\sqrt{\frac{2.0\times h}{g}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.8399999999999999em;vertical-align:-0.6555000000000001em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1844999999999999em;"><span class="svg-align" style="top:-3.8em;"><span class="pstrut" style="height:3.8em;"></span><span class="mord" style="padding-left:1em;"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801079999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">.</span><span class="mord mtight">0</span><span class="mbin mtight">×</span><span class="mord mathdefault mtight">h</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.481108em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-3.1445em;"><span class="pstrut" style="height:3.8em;"></span><span class="hide-tail" style="min-width:1.02em;height:1.8800000000000001em;"><svg width='400em' height='1.8800000000000001em' viewBox='0 0 400000 1944' preserveAspectRatio='xMinYMin slice'><path d='M1001,80H400000v40H1013.1s-83.4,268,-264.1,840c-180.7,
572,-277,876.3,-289,913c-4.7,4.7,-12.7,7,-24,7s-12,0,-12,0c-1.3,-3.3,-3.7,-11.7,
-7,-25c-35.3,-125.3,-106.7,-373.3,-214,-744c-10,12,-21,25,-33,39s-32,39,-32,39
c-6,-5.3,-15,-14,-27,-26s25,-30,25,-30c26.7,-32.7,52,-63,76,-91s52,-60,52,-60
s208,722,208,722c56,-175.3,126.3,-397.3,211,-666c84.7,-268.7,153.8,-488.2,207.5,
-658.5c53.7,-170.3,84.5,-266.8,92.5,-289.5c4,-6.7,10,-10,18,-10z
M1001 80H400000v40H1013z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.6555000000000001em;"><span></span></span></span></span></span></span></span></span>，所以 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi><mo>=</mo><mi>g</mi><mi>t</mi><mo>=</mo><mi>g</mi><msqrt><mfrac><mrow><mn>2.0</mn><mo>×</mo><mi>h</mi></mrow><mi>g</mi></mfrac></msqrt></mrow><annotation encoding="application/x-tex">v=gt=g\sqrt{\frac{2.0\times h}{g}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.80952em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.8399999999999999em;vertical-align:-0.6555000000000001em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1844999999999999em;"><span class="svg-align" style="top:-3.8em;"><span class="pstrut" style="height:3.8em;"></span><span class="mord" style="padding-left:1em;"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801079999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">.</span><span class="mord mtight">0</span><span class="mbin mtight">×</span><span class="mord mathdefault mtight">h</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.481108em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-3.1445em;"><span class="pstrut" style="height:3.8em;"></span><span class="hide-tail" style="min-width:1.02em;height:1.8800000000000001em;"><svg width='400em' height='1.8800000000000001em' viewBox='0 0 400000 1944' preserveAspectRatio='xMinYMin slice'><path d='M1001,80H400000v40H1013.1s-83.4,268,-264.1,840c-180.7,
572,-277,876.3,-289,913c-4.7,4.7,-12.7,7,-24,7s-12,0,-12,0c-1.3,-3.3,-3.7,-11.7,
-7,-25c-35.3,-125.3,-106.7,-373.3,-214,-744c-10,12,-21,25,-33,39s-32,39,-32,39
c-6,-5.3,-15,-14,-27,-26s25,-30,25,-30c26.7,-32.7,52,-63,76,-91s52,-60,52,-60
s208,722,208,722c56,-175.3,126.3,-397.3,211,-666c84.7,-268.7,153.8,-488.2,207.5,
-658.5c53.7,-170.3,84.5,-266.8,92.5,-289.5c4,-6.7,10,-10,18,-10z
M1001 80H400000v40H1013z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.6555000000000001em;"><span></span></span></span></span></span></span></span></span>。</p>
<pre><code class="language-cpp">//By: Luogu@rui_er(122461)
#include &lt;bits/stdc++.h&gt;
using namespace std;

int main()
{
	double g, h, m;
	cin&gt;&gt;g&gt;&gt;h&gt;&gt;m;
	double w = m * g * h;
	double v = g * sqrt(2.0*h/g);
	cout&lt;&lt;setprecision(4)&lt;&lt;fixed&lt;&lt;w&lt;&lt;&quot; &quot;&lt;&lt;v&lt;&lt;endl;
	return 0;
}
</code></pre>
<h2 id="26-f题">2.6 F题</h2>
<p>F12发现“祝你成功AK”后面有个<a href="https://wtcl.blog.ak-ioi.cf">链接</a>，点进去发现什么也没有。真的什么也没有吗？想起<a href="http://nazo.one-story.cn">nazo</a>中有一关“goL elosnoC uhihZ”，于是打开F12，进入“控制台”（英文版本叫“Console”），发现<code>answer:rui_er txdy</code>，输出<code>rui_er txdy</code>即可。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[【REOI2020R1】rui_er的愚人节水题大赛赛时答疑]]></title>
        <id>https://blog.ak-ioi.cf/post/reoi2020r1-q-and-a/</id>
        <link href="https://blog.ak-ioi.cf/post/reoi2020r1-q-and-a/">
        </link>
        <updated>2020-03-31T10:37:51.000Z</updated>
        <content type="html"><![CDATA[<p>有疑问在下面评论，rui_er随时来看。十分抱歉挂晚了几个小时，之前忘记赛时答疑这件事了。</p>
<p><strong>本帖禁止无意义回复，发现者一律删</strong></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Splay学习笔记[新文章暂时置顶]（upd：2020.03.30）]]></title>
        <id>https://blog.ak-ioi.cf/post/learning-splay/</id>
        <link href="https://blog.ak-ioi.cf/post/learning-splay/">
        </link>
        <updated>2020-03-26T03:16:46.000Z</updated>
        <content type="html"><![CDATA[<h1 id="0xfe-本文持续更新中">0XFE 本文持续更新中</h1>
<p>已完成更新：普通平衡树</p>
<p>下一步更新：文艺平衡树</p>
<p>队列中更新：LCT</p>
<h1 id="0xff-伸展树简介">0XFF 伸展树简介</h1>
<p>伸展树是一种二叉搜索树（二叉排序树），通过旋转（多次Splay操作）保持平衡，主要用于维护LCT（动态树，Link-Cut Tree）。LCT将在以后的学习笔记中详细讲解。</p>
<h1 id="0x00-伸展树能干什么">0X00 伸展树能干什么</h1>
<p>最基础的：</p>
<ul>
<li>插入节点k</li>
<li>删除节点k</li>
<li>求全局的k小值（根据排名求数）</li>
<li>求k的全局排名（根据数求排名）</li>
<li>求k的前驱（严格小于k的最大的数）</li>
<li>求k的后继（严格大于k的最小的数）</li>
</ul>
<p>详见：<a href="https://www.luogu.com.cn/problem/P3369">离线模板</a>、<a href="https://www.luogu.com.cn/problem/P6136">强制在线模板</a>。（本人已经使用无旋fhq-Treap、带旋Treap、Splay三种方式AC离线版，下面将详细介绍Splay方法）</p>
<p>进阶版（加tag）：</p>
<ul>
<li>给定一个初始数列</li>
<li>每次操作将区间 [l, r] 翻转</li>
</ul>
<p>详见：<a href="https://www.luogu.com.cn/problem/P3391">文艺平衡树</a></p>
<p>但其实进阶版比模板要短，大概是因为进阶版操作少，去掉了一系列不必要的操作。</p>
<h1 id="0x01-普通平衡树">0X01 普通平衡树</h1>
<h2 id="0x01-01-数据存储">0X01-01 数据存储</h2>
<pre><code class="language-cpp">const int MAXN = 100001;
int fa[MAXN], key[MAXN], son[MAXN][2], size[MAXN], cnt[MAXN];
int rt, sz;
</code></pre>
<p>fa数组存每个节点当前的父亲，key是节点权值，son的0和1分别表示左儿子和右儿子，size是以该节点为根的子树的大小，cnt是该数的数量。</p>
<p>rt存当前的根，sz是点的个数。</p>
<h2 id="0x01-02-清空一棵子树">0X01-02 清空一棵子树</h2>
<p>清空以x为根的子树，只需要把所有数据都清零即可。</p>
<pre><code class="language-cpp">inline void clear(int x) {fa[x] = key[x] = son[x][0] = son[x][1] = size[x] = cnt[x] = 0;}
</code></pre>
<h2 id="0x01-03-获取节点与父亲的关系">0X01-03 获取节点与父亲的关系</h2>
<p>这里用于获取节点x与父亲的关系，即是左儿子还是右儿子。</p>
<pre><code class="language-cpp">inline bool get(int x) {return son[fa[x]][1] == x;}
</code></pre>
<h2 id="0x01-04-更新子树大小">0X01-04 更新子树大小</h2>
<p>这里是更新子树大小的操作，<strong>因为需要用到儿子的size，所以每次更新前请确保所有孩子的值都是最新的！</strong></p>
<pre><code class="language-cpp">void update(int x)
{
	if(!x) return;//数据不合法
	size[x] = cnt[x];
	if(son[x][0]) size[x] += size[son[x][0]];
	if(son[x][1]) size[x] += size[son[x][1]];
}
</code></pre>
<h2 id="0x01-05-连边">0X01-05 连边</h2>
<p>将x设为y的关系为z的儿子。</p>
<pre><code class="language-cpp">void connect(int x, int y, int z)
{
	if(x) fa[x] = y;//把x的父亲设为y
	if(y) son[y][z] = x;//把y的关系为z的儿子设为x
}
</code></pre>
<h2 id="0x01-06-上旋">0X01-06 上旋</h2>
<p>这个操作是将节点x上旋，详见注释。</p>
<pre><code class="language-cpp">void rotate(int x)
{
	int f = fa[x], ff = fa[f], p = get(x), q = get(f);//获取父亲、爷爷、自己与父亲关系、父亲与爷爷关系
	connect(son[x][p^1], f, p);//把自己的p^1儿子连边到父亲，关系为p
	connect(f, x, p^1);//把父亲下旋到自己，关系为p^1
	connect(x, ff, q);//把自己上旋到爷爷，关系为q
	update(f);//为什么是这个顺序？因为这次操作把父亲旋转为自己的儿子，更新顺序就是原父亲到自己
	update(x);
}
</code></pre>
<p>上旋操作不太好理解，这里放几张图上来。</p>
<p>下面这个是旋转前的树，边权标的是关系。</p>
<figure data-type="image" tabindex="1"><img src="https://blog.ak-ioi.cf/post-images/1585533226259.png" alt="" loading="lazy"></figure>
<p>现在假设我们要上旋3号点，可以看到，3号点与父亲（2号点）的关系为0，异或为1，于是把3号点的右儿子（5号点）给父亲，此时因为父亲的儿子更新，3号点孤立：</p>
<figure data-type="image" tabindex="2"><img src="https://blog.ak-ioi.cf/post-images/1585533463733.png" alt="" loading="lazy"></figure>
<p>把父亲连到自己，成为自己的右儿子，因为父亲的fa被更新，1号点孤立：</p>
<figure data-type="image" tabindex="3"><img src="https://blog.ak-ioi.cf/post-images/1585533613373.png" alt="" loading="lazy"></figure>
<p>把自己连到爷爷，关系为0：</p>
<figure data-type="image" tabindex="4"><img src="https://blog.ak-ioi.cf/post-images/1585533738334.png" alt="" loading="lazy"></figure>
<p>可以看到3号点被上旋。</p>
<h2 id="0x01-07-splay操作维护平衡">0X01-07 splay操作维护平衡</h2>
<p>在这里，每次把节点旋转到根即可，但是在文艺平衡树中要指定旋转终点。这次为了省事，直接写旋转到根的即可：</p>
<pre><code class="language-cpp">void splay(int x)
{
	for(int f;f=fa[x];rotate(x)) if(fa[f]) rotate(get(x)==get(f)?f:x);
	rt = x;
}
</code></pre>
<p>一直上旋点x直到上旋到跟，把root（rt）改为当前点。</p>
<p>splay操作维护平衡性，写平衡树记得<strong>有事没事splay一下</strong>，毕竟splay多了用不了多长时间，splay少了会出错。</p>
<h2 id="0x01-08-插入节点">0X01-08 插入节点</h2>
<ul>
<li>情况1：如果不存在根（即一个数都没有），直接在根插入。</li>
<li>情况2：按照排序树性质向下查找，发现有过该权值的点，更新大小即可，记得需要splay。</li>
<li>情况3：查找到空节点发现不存在该节点，在最后那里加入这个点，更新信息即可，也需要splay。</li>
</ul>
<pre><code class="language-cpp">void insert(int x)
{
	if(!rt)//case 1
	{
		rt = ++sz;
		key[rt] = x;
		cnt[rt] = size[rt] = 1;
		son[rt][0] = son[rt][1] = 0;
		return;
	}
	int u = rt, f = 0;
	while(true)
	{
		if(key[u] == x)//case 2
		{
			++cnt[u];
			update(u);
			update(f);
			splay(u);
			return;
		}
		f = u, u = son[u][x&gt;key[u]];//排序树性质
		if(!u)//case 3
		{
			key[++sz] = x;
			cnt[sz] = size[sz] = 1;
			fa[sz] = f;
			son[f][x&gt;key[f]] = sz;
			update(f);
			splay(sz);
			return;
		}
	}
}
</code></pre>
<h2 id="0x01-09-查询数的排名">0X01-09 查询数的排名</h2>
<p>查询数的排名根据排序树性质判断是否在左子树，之后累加size即可。</p>
<pre><code class="language-cpp">int find(int x)
{
	int u = rt, ans = 0;
	while(true)
	{
		if(x &lt; key[u])//在左子树，当前点走到左儿子
		{
			u = son[u][0];
			continue;
		}
		ans += size[son[u][0]];//不在左子树，ans加上左子树大小
		if(x == key[u])//找到该节点，splay维持平衡，返回答案
		{
			splay(u);
			return ans + 1;
		}
		ans += cnt[u];//在右子树，ans加上当前位置数个数，向右查找
		u = son[u][1];
	}
}
</code></pre>
<h2 id="0x01-10-查询排名对应的数">0X01-10 查询排名对应的数</h2>
<p>这个操作与上一个类似，每次把要查的排名减少，查找子树即可。</p>
<pre><code class="language-cpp">int kth(int x)
{
	int u = rt;
	while(true)
	{
		if(son[u][0] &amp;&amp; x &lt;= size[son[u][0]])
		{
			u = son[u][0];
			continue;
		}
		if(son[u][0]) x -= size[son[u][0]];
		if(x &lt;= cnt[u])
		{
			splay(u);
			return key[u];
		}
		x -= cnt[u];
		u = son[u][1];
	}
}
</code></pre>
<h2 id="0x01-11-前驱">0X01-11 前驱</h2>
<p>根据前驱定义与排序树性质，找到左儿子并一直向右走即可。</p>
<pre><code class="language-cpp">int pre()
{
	int u = son[rt][0];
	while(son[u][1]) u = son[u][1];
	return u;
}
</code></pre>
<h2 id="0x01-12-后继">0X01-12 后继</h2>
<p>后继同理。</p>
<pre><code class="language-cpp">int suc()
{
	int u = son[rt][1];
	while(son[u][0]) u = son[u][0];
	return u;
}
</code></pre>
<h2 id="0x01-13-删除节点">0X01-13 删除节点</h2>
<ul>
<li>情况1：当前值有多个数，cnt更新即可。</li>
<li>情况2：没有左右儿子，直接删除。</li>
<li>情况3：只有右儿子，右儿子取代当前节点，把当前节点删除。</li>
<li>情况4：只有左儿子同理。</li>
<li>情况5：左右儿子都有，把前驱转到根节点，右儿子连到前驱成为前驱的右儿子，左儿子在旋转过程中旋转到其他地方，直接清除即可。</li>
</ul>
<pre><code class="language-cpp">void del(int x)
{
	int useless = find(x);//find把当前点转到根，方便操作
	if(cnt[rt] &gt; 1)//case 1
	{
		--cnt[rt];
		update(rt);
		return;
	}
	if(!son[rt][0] &amp;&amp; !son[rt][1])//case 2
	{
		clear(rt);
		rt = 0;
		return;
	}
	if(!son[rt][0])//case 3
	{
		int tmp = rt;
		fa[rt=son[rt][1]] = 0;
		clear(tmp);
		return;
	}
	if(!son[rt][1])//case 4
	{
		int tmp = rt;
		fa[rt=son[rt][0]] = 0;
		clear(tmp);
		return;
	}
	int tmp = rt, p = pre();//case 5
	splay(p);
	connect(son[tmp][1], rt, 1);
	clear(tmp);
	update(rt);
}
</code></pre>
<h2 id="0x01-14-完整程序">0X01-14 完整程序</h2>
<pre><code class="language-cpp">//By: Luogu@rui_er(122461)
#include &lt;bits/stdc++.h&gt;
using namespace std;
const int MAXN = 100001;

int fa[MAXN], key[MAXN], son[MAXN][2], size[MAXN], cnt[MAXN];
int rt, sz;

inline int read()
{
	char c;
	int s = 1, w = 0;
	c = getchar();
	for(;!isdigit(c);c=getchar()) if(c == '-') s = -1;
	for(;isdigit(c);c=getchar()) w = (w &lt;&lt; 3) + (w &lt;&lt; 1) + (c ^ 48);
	return s * w; 
}

inline void clear(int x) {fa[x] = key[x] = son[x][0] = son[x][1] = size[x] = cnt[x] = 0;}
inline bool get(int x) {return son[fa[x]][1] == x;}

void update(int x)
{
	if(!x) return;
	size[x] = cnt[x];
	if(son[x][0]) size[x] += size[son[x][0]];
	if(son[x][1]) size[x] += size[son[x][1]];
}

void connect(int x, int y, int z)
{
	if(x) fa[x] = y;
	if(y) son[y][z] = x;
}

void rotate(int x)
{
	int f = fa[x], ff = fa[f], p = get(x), q = get(f);
	connect(son[x][p^1], f, p);
	connect(f, x, p^1);
	connect(x, ff, q);
	update(f);
	update(x);
}

void splay(int x)
{
	for(int f;f=fa[x];rotate(x)) if(fa[f]) rotate(get(x)==get(f)?f:x);
	rt = x;
}

void insert(int x)
{
	if(!rt)
	{
		rt = ++sz;
		key[rt] = x;
		cnt[rt] = size[rt] = 1;
		son[rt][0] = son[rt][1] = 0;
		return;
	}
	int u = rt, f = 0;
	while(true)
	{
		if(key[u] == x)
		{
			++cnt[u];
			update(u);
			update(f);
			splay(u);
			return;
		}
		f = u, u = son[u][x&gt;key[u]];
		if(!u)
		{
			key[++sz] = x;
			cnt[sz] = size[sz] = 1;
			fa[sz] = f;
			son[f][x&gt;key[f]] = sz;
			update(f);
			splay(sz);
			return;
		}
	}
}

int find(int x)
{
	int u = rt, ans = 0;
	while(true)
	{
		if(x &lt; key[u])
		{
			u = son[u][0];
			continue;
		}
		ans += size[son[u][0]];
		if(x == key[u])
		{
			splay(u);
			return ans + 1;
		}
		ans += cnt[u];
		u = son[u][1];
	}
}

int kth(int x)
{
	int u = rt;
	while(true)
	{
		if(son[u][0] &amp;&amp; x &lt;= size[son[u][0]])
		{
			u = son[u][0];
			continue;
		}
		if(son[u][0]) x -= size[son[u][0]];
		if(x &lt;= cnt[u])
		{
			splay(u);
			return key[u];
		}
		x -= cnt[u];
		u = son[u][1];
	}
}

int pre()
{
	int u = son[rt][0];
	while(son[u][1]) u = son[u][1];
	return u;
}

int suc()
{
	int u = son[rt][1];
	while(son[u][0]) u = son[u][0];
	return u;
}

void del(int x)
{
	int useless = find(x);
	if(cnt[rt] &gt; 1)
	{
		--cnt[rt];
		update(rt);
		return;
	}
	if(!son[rt][0] &amp;&amp; !son[rt][1])
	{
		clear(rt);
		rt = 0;
		return;
	}
	if(!son[rt][0])
	{
		int tmp = rt;
		fa[rt=son[rt][1]] = 0;
		clear(tmp);
		return;
	}
	if(!son[rt][1])
	{
		int tmp = rt;
		fa[rt=son[rt][0]] = 0;
		clear(tmp);
		return;
	}
	int tmp = rt, p = pre();
	splay(p);
	connect(son[tmp][1], rt, 1);
	clear(tmp);
	update(rt);
}

int main()
{
	int n = read();
	while(n--)
	{
		int opt = read(), x = read();
		if(opt == 1) insert(x);
		else if(opt == 2) del(x);
		else if(opt == 3) printf(&quot;%d\n&quot;, find(x));
		else if(opt == 4) printf(&quot;%d\n&quot;, kth(x));
		else if(opt == 5)
		{
			insert(x);
			printf(&quot;%d\n&quot;, key[pre()]);
			del(x);
		}
		else
		{
			insert(x);
			printf(&quot;%d\n&quot;, key[suc()]);
			del(x);
		}
	}
	return 0;
}
</code></pre>
<h1 id="0x02-文艺平衡树待更新">0X02 文艺平衡树（待更新）</h1>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[珂朵莉树学习笔记[新文章暂时置顶]]]></title>
        <id>https://blog.ak-ioi.cf/post/chtholly-is-so-cute/</id>
        <link href="https://blog.ak-ioi.cf/post/chtholly-is-so-cute/">
        </link>
        <updated>2020-03-26T02:31:18.000Z</updated>
        <content type="html"><![CDATA[<h1 id="0xff-珂朵莉美图欣赏">0XFF 珂朵莉美图欣赏</h1>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mstyle mathsize="2.488em"><mtext>珂朵莉太可爱啦！</mtext></mstyle></mrow><annotation encoding="application/x-tex">\text{\Huge 珂朵莉太可爱啦！}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.7001250399999999em;vertical-align:0em;"></span><span class="mord text"><span class="mord cjk_fallback sizing reset-size6 size11">珂朵莉太可爱啦！</span></span></span></span></span></p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mstyle mathsize="2.488em"><mstyle mathcolor="red"><mtext>警告：前方高能</mtext></mstyle></mstyle></mrow><annotation encoding="application/x-tex">\text{\Huge\color{red}{警告：前方高能}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.7001250399999999em;vertical-align:0em;"></span><span class="mord text"><span class="mord sizing reset-size6 size11" style="color:red;"><span class="mord cjk_fallback" style="color:red;">警</span><span class="mord cjk_fallback" style="color:red;">告</span><span class="mord cjk_fallback" style="color:red;">：</span><span class="mord cjk_fallback" style="color:red;">前</span><span class="mord cjk_fallback" style="color:red;">方</span><span class="mord cjk_fallback" style="color:red;">高</span><span class="mord cjk_fallback" style="color:red;">能</span></span></span></span></span></span></p>
<figure data-type="image" tabindex="1"><img src="http://i0.hdslb.com/bfs/article/cb255233d3909df38d355f77d443dd2d987124be.jpg" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="2"><img src="http://i0.hdslb.com/bfs/article/3713354d3b0ff4816afe242da659e4079754f436.jpg" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="3"><img src="http://imgsrc.baidu.com/forum/w=580/sign=f3b7a7fd094f78f0800b9afb49300a83/dfa2c1399b504fc2dd3889acefdde71191ef6d45.jpg" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="4"><img src="http://i2.hdslb.com/bfs/archive/3c52f87d55716ab3cb282d9d70425ab1a65437a9.jpg" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="5"><img src="http://imgsrc.baidu.com/baike/pic/item/cf1b9d16fdfaaf51c812fca1815494eef01f7a3e.jpg" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="6"><img src="https://b-ssl.duitang.com/uploads/item/201801/23/20180123113519_lewge.thumb.224_0.png" alt="" loading="lazy"></figure>
<p><a href="https://www.chtholly.ac.cn/">中国珂学院</a></p>
<p><s>行了别看了赶紧进入正题</s></p>
<h1 id="0x00-简介">0X00 简介</h1>
<p>设计一个数据结构，区间加？</p>
<p>简单，线段树！</p>
<p>求区间第k小值？</p>
<p>主席树板子题！</p>
<p>区间推平赋值？还要查询区间k次幂的和？</p>
<p>……</p>
<p>不知道怎么办了吧！这四个操作是珂朵莉树最经典的操作。下面让我们跟着题目往下看。</p>
<h1 id="0x01-模板题-基本操作">0X01 模板题 - 基本操作</h1>
<p>总结一下上面说的操作：区间加、区间赋值、查询区间第k小、查询区间幂次和。</p>
<p>下面看一道模板题：<a href="https://www.luogu.com.cn/problem/CF896C">传送门</a></p>
<p><s>不要一看是黑题就害怕，<strong>珂朵莉树的本质其实就是拿一个set瞎暴力！</strong></s></p>
<h2 id="0x01-1-结构体定义">0X01-1 结构体定义</h2>
<pre><code class="language-cpp">typedef long long ll;
struct Node
{
    ll l, r;
    mutable ll v;
    Node(ll x, ll y=-1, ll z=0) : l(x), r(y), v(z) {}
    bool operator &lt; (const Node &amp;a) const {return l &lt; a.l;}
}
set&lt;Node&gt; ODT;
typedef set&lt;Node&gt;::iterator IT;
</code></pre>
<p>l、r表示区间左右端点，v是区间权值。下面那行定义了一个构造函数，方便以后使用。最后重载了小于运算符，按照区间左端点顺序排序，因为后面用的时候区间不存在重叠，所以其实就是让区间依次排序。</p>
<h2 id="0x01-2-split">0X01-2 split</h2>
<p>split操作用于将整段在pos的位置拆分为两小段，方便后续操作。</p>
<pre><code class="language-cpp">IT split(ll pos)
{
	IT iter = ODT.lower_bound(Node(pos));
	if(iter != ODT.end() &amp;&amp; iter-&gt;l == pos) return iter;//不需要拆分
	--iter;//一定在前一区间内
	ll L = iter-&gt;l, R = iter-&gt;r, V = iter-&gt;v;//把值取出
	ODT.erase(iter);//删除待拆分的原区间
	ODT.insert(Node(L, pos-1, V));//插入新区间，Node(L, pos-1, V)利用构造函数生成Node类
	return ODT.insert(Node(pos, R, V)).first;//插入新区间并返回目标位置
}
</code></pre>
<h2 id="0x01-3-区间加">0X01-3 区间加</h2>
<p>区间加法其实就是把要加的段取出来暴力加。<strong>注意这里必须先split右边再split左边！</strong></p>
<pre><code class="language-cpp">void update(ll l, ll r, ll dt)
{
	IT iterR = split(r+1), iterL = split(l);//必须先split右边再split左边
	for(iterL;iterL!=iterR;++iterL) iterL-&gt;v += dt;//暴力加整个区间
}
</code></pre>
<h2 id="0x01-4-区间赋值">0X01-4 区间赋值</h2>
<p>区间赋值也是取出要用的区间，把所有范围内的区间删掉，然后重新插入一个新区间。</p>
<pre><code class="language-cpp">void assign_val(ll l, ll r, ll w)
{
	IT iterR = split(r+1), iterL = split(l);
	ODT.erase(iterL, iterR);//删除赋值范围内所有区间
	ODT.insert(Node(l, r, w));//添加被删除的区间，权值直接改成要赋的值
}
</code></pre>
<h2 id="0x01-5-求区间内排名为k的数">0X01-5 求区间内排名为k的数</h2>
<p>就是求区间第k小，把区间所有数压进vector，然后排序即可。</p>
<pre><code class="language-cpp">ll ranking(ll l, ll r, ll k)
{
	vector&lt;pair&lt;ll, ll&gt; &gt; v;//声明vector，pair-&gt;first是值，pair-&gt;second是个数
	IT iterR = split(r+1), iterL = split(l);
	for(iterL;iterL!=iterR;++iterL) v.push_back(make_pair(iterL-&gt;v, iterL-&gt;r-iterL-&gt;l+1));//把区间内所有数push进vector
	sort(v.begin(), v.end());//vector排序
	for(vector&lt;pair&lt;ll, ll&gt; &gt;::iterator iter=v.begin();iter!=v.end();++iter)
	{
		k -= iter-&gt;second;
		if(k &lt;= 0) return iter-&gt;first;//不断降低k，直到k&lt;=0，输出
	}
}
</code></pre>
<h2 id="0x01-6-求区间所有数乘k次幂的和">0X01-6 求区间所有数乘k次幂的和</h2>
<p>区间幂次和，暴力算出所有的幂次和，加起来即可，<strong>这里需要使用快速幂。</strong></p>
<pre><code class="language-cpp">ll qpow(ll x, ll y, ll MOD)//快速幂，相信你们都会，不用解释了
{
	ll ret = 1;
	ll ans = x % MOD;
	while(y)
	{
		if(y&amp;1) ret = ret * ans % MOD;
		ans = ans * ans % MOD;
		y &gt;&gt;= 1;
	}
	return ret;
}

ll sum(ll l, ll r, ll x, ll y)//区间幂次和
{
	ll ans = 0;
	IT iterR = split(r+1), iterL = split(l);
	for(iterL;iterL!=iterR;++iterL)//枚举所有区间，算出幂次和
		ans = (ans + (iterL-&gt;r - iterL-&gt;l + 1) * qpow(iterL-&gt;v, x, y)) % y;
	return ans;
}
</code></pre>
<h2 id="0x01-7-完整程序">0X01-7 完整程序</h2>
<p>下面就是完整程序了。怎么样？是不是感觉<s>很暴力</s>很容易理解？</p>
<pre><code class="language-cpp">//By: Luogu@rui_er(122461)
#include &lt;bits/stdc++.h&gt;
using namespace std;
typedef long long ll;
const ll mod = 1000000007LL;
const ll MAXN = 100001;

ll n, m, seed, vmax;
ll a[MAXN];
struct Node
{
	ll l, r;
	mutable ll v;
	Node(ll x, ll y = -1, ll z = 0): l(x), r(y), v(z) {}
	bool operator &lt; (const Node &amp;a) const {return l &lt; a.l;}
};
typedef set&lt;Node&gt;::iterator IT;
set&lt;Node&gt; ODT;

ll rnd() //题目中要求的随机函数
{
	ll ret = seed;
	seed = (seed * 7 + 13) % mod;
	return ret;
}

IT split(ll pos)
{
	IT iter = ODT.lower_bound(Node(pos));
	if(iter != ODT.end() &amp;&amp; iter-&gt;l == pos) return iter;
	--iter;
	ll L = iter-&gt;l, R = iter-&gt;r, V = iter-&gt;v;
	ODT.erase(iter);
	ODT.insert(Node(L, pos-1, V));
	return ODT.insert(Node(pos, R, V)).first;
}

void update(ll l, ll r, ll dt)
{
	IT iterR = split(r+1), iterL = split(l);
	for(iterL;iterL!=iterR;++iterL) iterL-&gt;v += dt;
}

void assign_val(ll l, ll r, ll w)
{
	IT iterR = split(r+1), iterL = split(l);
	ODT.erase(iterL, iterR);
	ODT.insert(Node(l, r, w));
}

ll ranking(ll l, ll r, ll k)
{
	vector&lt;pair&lt;ll, ll&gt; &gt; v;
	IT iterR = split(r+1), iterL = split(l);
	for(iterL;iterL!=iterR;++iterL) v.push_back(make_pair(iterL-&gt;v, iterL-&gt;r-iterL-&gt;l+1));
	sort(v.begin(), v.end());
	for(vector&lt;pair&lt;ll, ll&gt; &gt;::iterator iter=v.begin();iter!=v.end();++iter)
	{
		k -= iter-&gt;second;
		if(k &lt;= 0) return iter-&gt;first;
	}
}

ll qpow(ll x, ll y, ll MOD)
{
	ll ret = 1;
	ll ans = x % MOD;
	while(y)
	{
		if(y&amp;1) ret = ret * ans % MOD;
		ans = ans * ans % MOD;
		y &gt;&gt;= 1;
	}
	return ret;
}

ll sum(ll l, ll r, ll x, ll y)
{
	ll ans = 0;
	IT iterR = split(r+1), iterL = split(l);
	for(iterL;iterL!=iterR;++iterL)
		ans = (ans + (iterL-&gt;r - iterL-&gt;l + 1) * qpow(iterL-&gt;v, x, y)) % y;
	return ans;
}

int main()
{
	scanf(&quot;%lld%lld%lld%lld&quot;, &amp;n, &amp;m, &amp;seed, &amp;vmax);
	for(ll i=1;i&lt;=n;i++)
	{
		a[i] = (rnd() % vmax) + 1;
		ODT.insert(Node(i, i, a[i]));
	}
	for(ll i=1;i&lt;=m;i++)
	{
		ll op = rnd() % 4 + 1;
		ll l = rnd() % n + 1;
		ll r = rnd() % n + 1;
		if(l &gt; r) swap(l, r);
		ll x, y;
		if(op == 3) x = rnd() % (r - l + 1) + 1;
		else x = rnd() % vmax + 1;
		if(op == 4) y = rnd() % vmax + 1;
		if(op == 1) update(l, r, x);
		else if(op == 2) assign_val(l, r, x);
		else if(op == 3) printf(&quot;%lld\n&quot;, ranking(l, r, x));
		else printf(&quot;%lld\n&quot;, sum(l, r, x, y));
	}
	return 0;
}
</code></pre>
<h1 id="0x02-其他题目">0X02 其他题目</h1>
<p>看这个<a href="https://www.luogu.com.cn/training/3592">题单</a>，另外P2894可以通过珂朵莉树拿到<a href="https://www.luogu.com.cn/record/30955717">92分</a>（别问我怎么知道的）。</p>
]]></content>
    </entry>
</feed>