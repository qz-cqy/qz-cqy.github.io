<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://blog.ak-ioi.cf</id>
    <title>rui_er 的博客</title>
    <updated>2020-07-28T02:46:18.062Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://blog.ak-ioi.cf"/>
    <link rel="self" href="https://blog.ak-ioi.cf/atom.xml"/>
    <subtitle>三思而后码</subtitle>
    <logo>https://blog.ak-ioi.cf/images/avatar.png</logo>
    <icon>https://blog.ak-ioi.cf/favicon.ico</icon>
    <rights>All rights reserved 2020, rui_er 的博客</rights>
    <entry>
        <title type="html"><![CDATA[浅谈 C++ 不定参数]]></title>
        <id>https://blog.ak-ioi.cf/post/c-han-shu-bu-ding-can-shu-xiang-jie/</id>
        <link href="https://blog.ak-ioi.cf/post/c-han-shu-bu-ding-can-shu-xiang-jie/">
        </link>
        <updated>2020-07-27T12:41:29.000Z</updated>
        <summary type="html"><![CDATA[<p>你是否遇到过一个函数要传的参数不确定的问题？你是否想要写一个方便的函数可以处理任意多个数的最小值（最大值、加和），而不是套很多层的 min（max、+）？C++ 函数不定参数可以实现这些。</p>
]]></summary>
        <content type="html"><![CDATA[<p>你是否遇到过一个函数要传的参数不确定的问题？你是否想要写一个方便的函数可以处理任意多个数的最小值（最大值、加和），而不是套很多层的 min（max、+）？C++ 函数不定参数可以实现这些。</p>
<!-- more -->
<p>先来说说多个数最小值的函数。</p>
<p>我们首先声明一个函数：</p>
<pre><code class="language-cpp">int Min(int tot, ...);
</code></pre>
<p>这里 tot 表示要求最小值的数的个数，后面的 ... 是数的列表。</p>
<p>我们需要调用后面的列表，在函数中定义 va_list，长度为 tot：</p>
<pre><code class="language-cpp">int Min(int tot, ...) {
    va_list a;
    va_start(a, tot);
    // Do something..
}
</code></pre>
<p>然后开始写比较，每次从列表中取一个 int 元素，与当前最小值比较（这里最小值设置为 0x3f3f3f3f），取元素时使用 va_arg()，最后结束列表即可。</p>
<pre><code class="language-cpp">int Min(int tot, ...) {
	va_list a;
	va_start(a, tot);
	int res = 0x3f3f3f3f;
	for(int i=1;i&lt;=tot;i++) {
		res = min(res, va_arg(a, int));
	}
	va_end(a);
	return res;
}
</code></pre>
<p>我们试着调用 Min(4, -1, 3, 2, 0)，发现返回值为 -1，即 -1, 3, 2, 0 这四个数中的最小值。</p>
<hr>
<p>以上是 C++98 支持的最基本的不定参数用法，下面讲解一个 C++11 新增的技巧——可变参数模板。</p>
<p>C++11 允许我们这样定义一个可变参数类模板：</p>
<pre><code class="language-cpp">template&lt;typename ... Types&gt;
class QAQ {
    // Do something..
};
</code></pre>
<p>这样我们就可以用任意数量的变量类型来初始化 QAQ：</p>
<pre><code class="language-cpp">QAQ&lt;&gt; c1;
QAQ&lt;int&gt; c2;
QAQ&lt;int, char&gt; c3;
</code></pre>
<p>如果想要避免出现使用 0 个模板参数来初始化的情况，我们可以这么写：</p>
<pre><code class="language-cpp">template&lt;typename T, typename ... Types&gt;
class QAQ2 {
    // Do something..
};
</code></pre>
<p>可变参数函数模板如下（这里是一个输出不同类型的变量的函数）：</p>
<pre><code class="language-cpp">void print() { // 这个函数啥都不用做，只是为了防止递归到最后一层后出现的函数未定义的现象，可以自行探索
    ;
}
template&lt;typename T, typename ... Types&gt;
void print(T arg, Types ... args) {
    cout&lt;&lt;arg&lt;&lt;endl;
    print(args ...);
}
</code></pre>
<p>这样我们就可以输出一串任意长度、任意类型的列表了：</p>
<pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;
using namespace std;

void print() {
    ;
}
template&lt;typename T, typename ... Types&gt;
void print(T arg, Types ... args) {
    cout&lt;&lt;arg&lt;&lt;endl;
    print(args ...);
}

int main() {
    int a = 0;
    print(1, 2, 0.18, &quot;QAQ&quot;, a, &amp;a);
    return 0;
}
</code></pre>
<p>输出结果：</p>
<pre><code class="language-plain">1
2
0.18
QAQ
0
0x73fe1c
</code></pre>
<p>（注：最后一个输出的是变量 a 的地址，可能因人而异）</p>
<p>以上就是不定参数的基本用法，大家学会了吗？可以自己写写试试哟~</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[插头dp——从入门到跳楼]]></title>
        <id>https://blog.ak-ioi.cf/post/cha-tou-dp-cong-ru-men-dao-tiao-lou/</id>
        <link href="https://blog.ak-ioi.cf/post/cha-tou-dp-cong-ru-men-dao-tiao-lou/">
        </link>
        <updated>2020-07-21T04:50:12.000Z</updated>
        <content type="html"><![CDATA[<h1 id="前置知识">前置知识</h1>
<ul>
<li>动态规划</li>
<li>括号表示法（或最小表示法）</li>
<li>状态压缩</li>
<li>哈希表</li>
</ul>
<h1 id="一些定义">一些定义</h1>
<p>先看模板题：<a href="https://www.luogu.com.cn/problem/P5056">P5056@洛谷</a> - 【模板】插头dp</p>
<p>插头 dp 主要用于解决网格图上的哈密顿回路相关的问题。</p>
<h2 id="插头">插头</h2>
<p>插头就是网格图上一个格子与另一个格子相连的位置，如图。</p>
<figure data-type="image" tabindex="1"><img src="https://s1.ax1x.com/2020/07/21/UINaCj.png" alt="" loading="lazy"></figure>
<h2 id="轮廓线">轮廓线</h2>
<p>在我们指定一个当前格子时，他的下侧和右侧连接到边界的线成为轮廓线。</p>
<p>如图，蓝色格子为当前格子，红色线为轮廓线。</p>
<figure data-type="image" tabindex="2"><img src="https://s1.ax1x.com/2020/07/21/UINw2n.png" alt="" loading="lazy"></figure>
<h1 id="毒瘤动规-插头-dp">毒瘤动规 - 插头 dp</h1>
<h2 id="设计状态">设计状态</h2>
<p>插头 dp 中状态为一条轮廓线，每次状态转移转移一个格子，轮廓线转移如图：</p>
<figure data-type="image" tabindex="3"><img src="https://s1.ax1x.com/2020/07/21/UINXRA.png" alt="" loading="lazy"></figure>
<h2 id="状态压缩">状态压缩</h2>
<p>由于数据量太大，这里需要使用状态压缩。</p>
<p>我们知道，为了形成回路，在任意时刻插头均不会相交。（红色为插头，绿色为轮廓线）</p>
<figure data-type="image" tabindex="4"><img src="https://s1.ax1x.com/2020/07/21/UIU7yq.png" alt="" loading="lazy"></figure>
<p>于是想到括号串。这里我们用 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>(</mo></mrow><annotation encoding="application/x-tex">(</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span></span></span></span>、<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>)</mo></mrow><annotation encoding="application/x-tex">)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mclose">)</span></span></span></span>、<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">#</mi></mrow><annotation encoding="application/x-tex">\#</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord">#</span></span></span></span> 来表示轮廓线为在左侧的插头、在右侧的插头或没有插头。</p>
<p>因为需要状态压缩，我们考虑使用括号表示法（最小表示法也可以，但在本文中不会涉及）。在这里我们将 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn><mo separator="true">,</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">0,1,2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span></span></span></span> 分别表示空插头、左侧插头和右侧插头。</p>
<h2 id="状态转移">状态转移</h2>
<p>状态转移有如下几种情况：</p>
<h3 id="当前格为障碍">当前格为障碍</h3>
<p>若当前格为障碍，直接转移即可。</p>
<h3 id="当前格既没有上插头又没有左插头">当前格既没有上插头又没有左插头</h3>
<p>此时为了满足经过所有格子，添加右侧和下侧的插头，即在括号串中将一对 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>00</mn></mrow><annotation encoding="application/x-tex">00</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">0</span></span></span></span> 替换为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>12</mn></mrow><annotation encoding="application/x-tex">12</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">2</span></span></span></span>。</p>
<h3 id="当前格有上插头">当前格有上插头</h3>
<p>则有两种转移方式——直走延长插头或转弯。</p>
<h3 id="当前格有左插头">当前格有左插头</h3>
<p>同理。</p>
<h3 id="当前格既有上插头又有左插头">当前格既有上插头又有左插头</h3>
<h4 id="均为-1-或均为-2">均为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 或均为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn></mrow><annotation encoding="application/x-tex">2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span></h4>
<p>此时将两个 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>（<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn></mrow><annotation encoding="application/x-tex">2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span>）合并变为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>，并向右侧（左侧）找到第一个右插头（左插头）变为左插头（右插头）。</p>
<h4 id="左插头为-2-上插头为-1">左插头为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn></mrow><annotation encoding="application/x-tex">2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span>、上插头为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></h4>
<p>此时直接连起来即可。</p>
<h4 id="左插头为-1-上插头为-2">左插头为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>、上插头为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn></mrow><annotation encoding="application/x-tex">2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span></h4>
<p>此时将要形成闭合回路。判断当前格是否为最后一格，是则连接并更新答案，否则状态不合法。</p>
<h2 id="其他细节">其他细节</h2>
<p>我们建立滚动哈希表方便压缩空间，同时 dp 只记录哈希位置的值。因为是哈希表，因此在每一行开始的时候都需要 <code>modifyQue()</code> 来滚动、更换值。</p>
<h2 id="完整代码">完整代码</h2>
<p>您大可先看看我 23 次才 AC 的<a href="https://www.luogu.com.cn/record/list?pid=P5056&amp;user=122461&amp;page=1">提交记录</a>。</p>
<pre><code class="language-cpp">//By: Luogu@rui_er(122461)
#include &lt;bits/stdc++.h&gt;
#define fil(a,b) memset((a),(b),sizeof(a))
#define in inline
using namespace std;
typedef long long ll;
const ll N = 12+5, X = 3e5+5, K = 1&lt;&lt;25|5, mod = 299987;
ll n, m, dx, dy, bit, lst, ans;
ll a[N][N], p[N], h[X], nxt[K], que[2][K], val[2][K], cnt[2];
in void add(ll hash, ll status, ll tot) {
	nxt[++cnt[bit]] = h[hash];
	h[hash] = cnt[bit];
	que[bit][cnt[bit]] = status;
	val[bit][cnt[bit]] = tot;
}
in void insert(ll status, ll tot) {
	int hash = status % mod + 1;
	for(ll i=h[hash];i;i=nxt[i]) {
		if(que[bit][i] == status) {
			val[bit][i] += tot;
			return;
		}
	}
	add(hash, status, tot);
}
in void modifyQue() {
	for(ll i=1;i&lt;=cnt[bit];i++) {
		que[bit][i] &lt;&lt;= 2;
	}
}
in void dp() {
	cnt[bit] = 1;
	val[bit][1] = 1;
	que[bit][1] = 0;
	for(ll i=1;i&lt;=n;i++) {
		modifyQue();
		for(ll j=1;j&lt;=m;j++) {
			fil(h, 0);
			lst = bit;
			bit ^= 1;
			cnt[bit] = 0;
			for(ll k=1;k&lt;=cnt[lst];k++) {
				ll status = que[lst][k];
				ll tot = val[lst][k];
				ll P1 = (status &gt;&gt; ((j - 1) * 2)) % 4;
				ll P2 = (status &gt;&gt; (j * 2)) % 4;
				if(!a[i][j]) {
					if(!P1 &amp;&amp; !P2) {
						insert(status, tot);
					}
				}
				else if(!P1 &amp;&amp; !P2) {
					if(a[i][j+1] &amp;&amp; a[i+1][j]) {
						ll nxtStatus = status + p[j-1] + 2 * p[j];
						insert(nxtStatus, tot);
					}
				}
				else if(!P1 &amp;&amp; P2) {
					if(a[i][j+1]) {
						insert(status, tot);
					}
					if(a[i+1][j]) {
						ll nxtStatus = status - p[j] * P2 + p[j-1] * P2;
						insert(nxtStatus, tot);
					}
				}
				else if(P1 &amp;&amp; !P2) {
					if(a[i+1][j]) {
						insert(status, tot);
					}
					if(a[i][j+1]) {
						ll nxtStatus = status - p[j-1] * P1 + p[j] * P1;
						insert(nxtStatus, tot);
					}
				}
				else if(P1 == 1 &amp;&amp; P2 == 1) {
					ll tmp = 1;
					for(ll l=j+1;l&lt;=m;l++) {
						ll Pid = (status &gt;&gt; (l * 2)) % 4;
						if(Pid == 1) {
							++tmp;
						}
						else if(Pid == 2) {
							--tmp;
						}
						if(!tmp) {
							ll nxtStatus = status - p[j] - p[j-1] - p[l];
							insert(nxtStatus, tot);
							break;
						}
					}
				}
				else if(P1 == 2 &amp;&amp; P2 == 2) {
					ll tmp = 1;
					for(ll l=j-2;l&gt;=0;l--) {
						ll Pid = (status &gt;&gt; (l &lt;&lt; 1)) % 4;
						if(Pid == 1) {
							--tmp;
						}
						else if(Pid == 2) {
							++tmp;
						}
						if(!tmp) {
							ll nxtStatus = status - 2 * p[j] - 2 * p[j-1] + p[l];
							insert(nxtStatus, tot);
							break;
						}
					}
				}
				else if(P1 == 2 &amp;&amp; P2 == 1) {
					ll nxtStatus = status - 2 * p[j-1] - p[j];
					insert(nxtStatus, tot);
				}
				else if(i == dx &amp;&amp; j == dy) {
					ans += tot;
				}
			}
		}
	}
}

int main() {
	scanf(&quot;%lld%lld&quot;, &amp;n, &amp;m);
	for(ll i=1;i&lt;=n;i++) {
		string s;
		cin&gt;&gt;s;
		s = ' ' + s;
		for(ll j=1;j&lt;=m;j++) {
			if(s[j] == '.') {
				a[i][j] = 1;
				dx = i;
				dy = j;
			}
		}
	}
	p[0] = 1;
	for(ll i=1;i&lt;=12;i++) {
		p[i] = p[i-1] &lt;&lt; 2;
	}
	dp();
	printf(&quot;%lld\n&quot;, ans);
	return 0;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[陈丹琪分治学习笔记]]></title>
        <id>https://blog.ak-ioi.cf/post/learning-cdq/</id>
        <link href="https://blog.ak-ioi.cf/post/learning-cdq/">
        </link>
        <updated>2020-07-21T01:25:31.000Z</updated>
        <content type="html"><![CDATA[<p>先来看一道模板题：<a href="https://www.luogu.com.cn/problem/P3810">P3810@洛谷</a> - 【模板】三维偏序（陌上花开）。</p>
<p>考虑 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><msup><mi>n</mi><mn>2</mn></msup><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> 暴力枚举，但是数据范围大到离谱，因此这种方法显然行不通。</p>
<p>下面就来讲解陈丹琪分治算法，主要用于解决 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 维偏序问题。</p>
<h1 id="前置知识">前置知识</h1>
<h2 id="前置知识-2">前置知识</h2>
<ul>
<li>树状数组</li>
<li>函数递归 / 分治</li>
<li>归并排序</li>
</ul>
<h2 id="偏序问题简述">偏序问题简述</h2>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 维偏序，即有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span> 个元素，每个元素有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 个属性 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mrow><mi>i</mi><mo separator="true">,</mo><mn>1</mn></mrow></msub><mo separator="true">,</mo><msub><mi>a</mi><mrow><mi>i</mi><mo separator="true">,</mo><mn>2</mn></mrow></msub><mo separator="true">,</mo><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><msub><mi>a</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>n</mi></mrow></msub></mrow><annotation encoding="application/x-tex">a_{i,1},a_{i,2},\cdots,a_{i,n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.716668em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mpunct mtight">,</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mpunct mtight">,</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>，求对于 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi><mo>∈</mo><mo>[</mo><mn>1</mn><mo separator="true">,</mo><mi>k</mi><mo>]</mo></mrow><annotation encoding="application/x-tex">i\in[1,k]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69862em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">]</span></span></span></span>，使 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mrow><mi>j</mi><mo separator="true">,</mo><mn>1</mn></mrow></msub><mo>≤</mo><msub><mi>a</mi><mrow><mi>i</mi><mo separator="true">,</mo><mn>1</mn></mrow></msub><mo separator="true">,</mo><msub><mi>a</mi><mrow><mi>j</mi><mo separator="true">,</mo><mn>2</mn></mrow></msub><mo>≤</mo><msub><mi>a</mi><mrow><mi>i</mi><mo separator="true">,</mo><mn>2</mn></mrow></msub><mo separator="true">,</mo><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><msub><mi>a</mi><mrow><mi>j</mi><mo separator="true">,</mo><mi>n</mi></mrow></msub><mo>≤</mo><msub><mi>a</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>n</mi></mrow></msub></mrow><annotation encoding="application/x-tex">a_{j,1}\le a_{i,1}, a_{j,2}\le a_{i,2}, \cdots, a_{j,n}\le a_{i,n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.922078em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mpunct mtight">,</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.922078em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mpunct mtight">,</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mpunct mtight">,</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.922078em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mpunct mtight">,</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.716668em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span> 且 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>j</mi><mi mathvariant="normal">≠</mi><mi>i</mi></mrow><annotation encoding="application/x-tex">j\ne i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mrel"><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mrel"></span></span><span class="fix"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span> 的元素个数。</p>
<h2 id="一维偏序问题">一维偏序问题</h2>
<p>一维偏序，即给定 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 个整数，求对于数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">a_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，满足 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mi>j</mi></msub><mo>≤</mo><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">a_j\le a_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.922078em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 且 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>j</mi><mi mathvariant="normal">≠</mi><mi>i</mi></mrow><annotation encoding="application/x-tex">j\ne i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mrel"><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mrel"></span></span><span class="fix"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span> 的整数个数。</p>
<p>可以考虑排序，复杂度 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n\log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>。</p>
<p>模板题：<a href="https://www.luogu.com.cn/problem/P1177">P1177@洛谷</a> - 【模板】快速排序。</p>
<h2 id="二维偏序问题">二维偏序问题</h2>
<p>二维偏序，在平面内有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 个点，对于 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span>，求 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>j</mi><mi mathvariant="normal">≠</mi><mi>i</mi><mo separator="true">,</mo><msub><mi>x</mi><mi>j</mi></msub><mo>≤</mo><msub><mi>x</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>y</mi><mi>j</mi></msub><mo>≤</mo><msub><mi>y</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">j\ne i,x_j\le x_i,y_j\le y_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mrel"><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mrel"></span></span><span class="fix"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.9456279999999999em;vertical-align:-0.286108em;"></span><span class="mord mathdefault">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.922078em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，此类问题可以考虑树状数组，复杂度 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n\log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>。</p>
<p>模板题：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=1541">HDU1541@杭电</a> - Stars（由于很久以前做的忘记洛谷上那道题的题号了，只能从别人的博客找了外 OJ 的一道题。）</p>
<p>代码：懒得写了，引自<a href="https://www.luogu.com.cn/blog/Owencodeisking/post-xue-xi-bi-ji-cdq-fen-zhi-hu-zheng-ti-er-fen">[学习笔记]CDQ分治和整体二分</a></p>
<pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;
#define lowbit(x) ((x)&amp;(-(x)))
using namespace std;
const int maxn=100000+10;
int n,c[maxn],ans[maxn];

struct Stars{
    int x,y;
}a[maxn];

bool cmp(Stars a,Stars b){
    if(a.x!=b.x) return a.x&lt;b.x;
    return a.y&lt;b.y;
}

inline int read(){
    register int x=0,f=1;char ch=getchar();
    while(!isdigit(ch)){if(ch=='-')f=-1;ch=getchar();}
    while(isdigit(ch)){x=(x&lt;&lt;3)+(x&lt;&lt;1)+ch-'0';ch=getchar();}
    return (f==1)?x:-x;
}
void add(int x,int y){
    for(;x&lt;maxn;x+=lowbit(x)) c[x]+=y; 
}
int sum(int x){
    int ans=0;
    for(;x;x-=lowbit(x)) ans+=c[x];
    return ans;
}

int main()
{
    n=read();
    for(int i=1;i&lt;=n;i++) 
        a[i].x=read(),a[i].y=read();
    sort(a+1,a+n+1,cmp);
    int now;
    for(int i=1;i&lt;=n;i++){
        now=sum(a[i].y+1);
        ans[now]++;
        add(a[i].y+1,1);
    }
    for(int i=0;i&lt;n;i++) 
        printf(&quot;%d\n&quot;,ans[i]);
    return 0;
}
</code></pre>
<h1 id="陈丹琪分治-三维偏序问题">陈丹琪分治 - 三维偏序问题</h1>
<p>简单来讲就只是在上面的二维偏序上面增加一个维度。</p>
<p>我们考虑按第一个属性排序，第二个属性使用归并排序，第三个属性使用树状数组。</p>
<p>归并排序时因为第一个属性有序，因此排序第二个属性时可以随意打乱，因为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mrow><mi>j</mi><mo>∈</mo><mo>[</mo><mi>m</mi><mi>i</mi><mi>d</mi><mo>+</mo><mn>1</mn><mo separator="true">,</mo><mi>r</mi><mo>]</mo></mrow></msub><mo>≥</mo><msub><mi>a</mi><mrow><mi>i</mi><mo>∈</mo><mo>[</mo><mi>l</mi><mo separator="true">,</mo><mi>m</mi><mi>i</mi><mi>d</mi><mo>]</mo></mrow></msub></mrow><annotation encoding="application/x-tex">a_{j\in[mid+1,r]}\ge a_{i\in[l,mid]}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9911699999999999em;vertical-align:-0.3551999999999999em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.34480000000000005em;"><span style="top:-2.5198em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">∈</span><span class="mopen mtight">[</span><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">d</span><span class="mbin mtight">+</span><span class="mord mtight">1</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mclose mtight">]</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3551999999999999em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7857599999999999em;vertical-align:-0.3551999999999999em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.34480000000000005em;"><span style="top:-2.5198em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">∈</span><span class="mopen mtight">[</span><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">d</span><span class="mclose mtight">]</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3551999999999999em;"><span></span></span></span></span></span></span></span></span></span>。因为此时两个属性均有序，第三维就可以使用树状数组求解了，复杂度 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><msup><mi>log</mi><mo>⁡</mo><mn>2</mn></msup><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n\log^2 n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.148448em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8984479999999999em;"><span style="top:-3.1473400000000002em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>。</p>
<p>模板题：<a href="https://www.luogu.com.cn/problem/P3810">P3810@洛谷</a> - 【模板】三维偏序（陌上花开）</p>
<p>以下是我的 AC 代码：（当时写的，码风可能不太好）</p>
<pre><code class="language-cpp">//By: Luogu@rui_er(122461)
#include &lt;bits/stdc++.h&gt;
using namespace std;
const int MAXN = 1e5+5;

int n, m;
int ans[MAXN];
struct Node
{
	int a, b, c;
	int w, f;
	bool operator &lt; (const Node &amp;p) const
	{
		if(a != p.a) return a &lt; p.a;
		if(b != p.b) return b &lt; p.b;
		return c &lt; p.c;
	}
}e[MAXN], tmp[MAXN];

namespace BIT
{
	int index[MAXN&lt;&lt;1];
	int lowbit(int x) {return x&amp;(-x);}
	void upd(int x, int y) {for(;x&lt;=m;x+=lowbit(x)) index[x] += y;}
	int sum(int x) {int ans = 0; for(;x;x-=lowbit(x)) ans += index[x]; return ans;}
}
namespace cdq
{
	void mergesort(int l, int mid, int r)
	{
		int x = l, y = mid + 1, tot = l;
		while(x &lt;= mid &amp;&amp; y &lt;= r)
		{
			if(e[x].b &lt;= e[y].b) BIT::upd(e[x].c, e[x].w), tmp[tot++] = e[x++];
			else e[y].f += BIT::sum(e[y].c), tmp[tot++] = e[y++];
		}
		while(x &lt;= mid) BIT::upd(e[x].c, e[x].w), tmp[tot++] = e[x++];
		while(y &lt;= r) e[y].f += BIT::sum(e[y].c), tmp[tot++] = e[y++];
		for(int i=l;i&lt;=mid;i++) BIT::upd(e[i].c, -e[i].w);
		for(int i=l;i&lt;=r;i++) e[i] = tmp[i];
	}
	void main(int l, int r)
	{
		int mid = (l + r) &gt;&gt; 1;
		if(l == r) return;
		main(l, mid);
		main(mid+1, r);
		mergesort(l, mid, r);
	}
}

void de_weight(int &amp;cnt)
{
	sort(e+1, e+1+n);
	cnt = 1;
	for(int i=2;i&lt;=n;i++)
	{
		if(e[i].a == e[cnt].a &amp;&amp; e[i].b == e[cnt].b &amp;&amp; e[i].c == e[cnt].c) ++e[cnt].w;
		else e[++cnt] = e[i];
	}
}

int main()
{
	cin&gt;&gt;n&gt;&gt;m;
	for(int i=1;i&lt;=n;i++)
	{
		cin&gt;&gt;e[i].a&gt;&gt;e[i].b&gt;&gt;e[i].c;
		e[i].w = 1;
		e[i].f = 0;
	}
	int cnt;
	de_weight(cnt);
	cdq::main(1, cnt);
	for(int i=1;i&lt;=cnt;i++) ans[e[i].w+e[i].f-1] += e[i].w;
	for(int i=0;i&lt;n;i++) cout&lt;&lt;ans[i]&lt;&lt;endl;
	return 0;
}
</code></pre>
<h1 id="陈丹琪分治套陈丹琪分治-四维偏序问题">陈丹琪分治套陈丹琪分治 - 四维偏序问题</h1>
<p>四维偏序问题也类似，需要陈丹琪分治套陈丹琪分治套树状数组。具体思想类似，在这里不详细讲了，复杂度 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><msup><mi>log</mi><mo>⁡</mo><mn>3</mn></msup><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n\log^3 n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.148448em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8984479999999999em;"><span style="top:-3.1473400000000002em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>。</p>
<p>模板题：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=5126">HDU5126@杭电</a> - Stars（没错这题也叫 Stars</p>
<p>代码：（还是引自上面那篇博客）</p>
<pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;
#define lowbit(x) ((x)&amp;(-(x)))
using namespace std;
const int maxn=400000+10;
int n,m,mp[maxn],c[maxn],ans[maxn],tot;

struct Element{
    int op,x,y,z,w,id,flag;
}e[maxn],t[maxn],d[maxn];

inline int read(){
    register int x=0,f=1;char ch=getchar();
    while(!isdigit(ch)){if(ch=='-')f=-1;ch=getchar();}
    while(isdigit(ch)){x=(x&lt;&lt;3)+(x&lt;&lt;1)+ch-'0';ch=getchar();}
    return (f==1)?x:-x;
}
void add(int x,int y){
    for(;x&lt;maxn;x+=lowbit(x)) c[x]+=y;
}
int sum(int x){
    int ans=0;
    for(;x;x-=lowbit(x)) ans+=c[x];
    return ans;
}

void CDQ3d(int l,int r){
    if(l==r) return ;
    int mid=(l+r)&gt;&gt;1;
    CDQ3d(l,mid);CDQ3d(mid+1,r);
    int p=l,q=mid+1,cnt=l;
    while(p&lt;=mid&amp;&amp;q&lt;=r){
        if(t[p].y&lt;=t[q].y){
            if(t[p].op==1&amp;&amp;t[p].flag==0)
                add(t[p].z,1);
            d[cnt++]=t[p++];
        }
        else {
            if(t[q].op==2&amp;&amp;t[q].flag==1)
                ans[t[q].id]+=t[q].w*sum(t[q].z);
            d[cnt++]=t[q++];
        }
    }
    while(p&lt;=mid){
        if(t[p].op==1&amp;&amp;t[p].flag==0)
            add(t[p].z,1);
        d[cnt++]=t[p++];
    }
    while(q&lt;=r){
        if(t[q].op==2&amp;&amp;t[q].flag==1)
            ans[t[q].id]+=t[q].w*sum(t[q].z);
        d[cnt++]=t[q++];
    }
    for(int i=l;i&lt;=mid;i++){
        if(t[i].op==1&amp;&amp;t[i].flag==0)
            add(t[i].z,-1);
    }
    for(int i=l;i&lt;=r;i++) t[i]=d[i];
}

void CDQ2d(int l,int r){
    if(l==r) return ;
    int mid=(l+r)&gt;&gt;1;
    CDQ2d(l,mid);CDQ2d(mid+1,r);
    int p=l,q=mid+1,cnt=l;
    while(p&lt;=mid&amp;&amp;q&lt;=r){
        if(e[p].x&lt;=e[q].x){
            t[cnt++]=e[p++];t[cnt-1].flag=0;
        }
        else {
            t[cnt++]=e[q++];t[cnt-1].flag=1;
        }
    }
    while(p&lt;=mid){
        t[cnt++]=e[p++];t[cnt-1].flag=0;
    }
    while(q&lt;=r){
        t[cnt++]=e[q++];t[cnt-1].flag=1;
    }
    for(int i=l;i&lt;=r;i++) e[i]=t[i];
    CDQ3d(l,r);
}

int main()
{
    int T=read();
    while(T--){
        memset(ans,0,sizeof(ans));
        m=read();tot=0;
        int op,x1,y1,z1,x2,y2,z2,t=0;
        for(int i=1;i&lt;=m;i++){
            op=read();
            if(op==1){
                x1=read(),y1=read(),z1=read();
                e[++tot]=(Element){1,x1,y1,z1,1,tot,0};
            }
            else {
                x1=read(),y1=read(),z1=read(),x2=read(),y2=read(),z2=read();
                t++;
                e[++tot]=(Element){2,x2,y2,z2,1,t,0};
                e[++tot]=(Element){2,x1-1,y2,z2,-1,t,0};
                e[++tot]=(Element){2,x2,y1-1,z2,-1,t,0};
                e[++tot]=(Element){2,x2,y2,z1-1,-1,t,0};
                e[++tot]=(Element){2,x1-1,y1-1,z2,1,t,0};
                e[++tot]=(Element){2,x1-1,y2,z1-1,1,t,0};
                e[++tot]=(Element){2,x2,y1-1,z1-1,1,t,0};
                e[++tot]=(Element){2,x1-1,y1-1,z1-1,-1,t,0};
            }
        }
        for(int i=1;i&lt;=tot;i++) mp[i]=e[i].z;
        sort(mp+1,mp+tot+1);
        int cnt=unique(mp+1,mp+tot+1)-mp-1;
        for(int i=1;i&lt;=tot;i++) e[i].z=lower_bound(mp+1,mp+cnt+1,e[i].z)-mp;
        CDQ2d(1,tot);
        for(int i=1;i&lt;=t;i++) printf(&quot;%d\n&quot;,ans[i]);
    }
    return 0;
}
</code></pre>
<h1 id="高维偏序问题ge5">高维偏序问题（<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>≥</mo><mn>5</mn></mrow><annotation encoding="application/x-tex">\ge5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">5</span></span></span></span>）</h1>
<p>在更高维的情况下陈丹琪分治也比较慢，基本就是暴力了。可以使用 bitset 优化，复杂度 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mfrac><msup><mi>n</mi><mn>2</mn></msup><mn>32</mn></mfrac><mo>)</mo></mrow><annotation encoding="application/x-tex">O(\frac{n^2}{32})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.36292em;vertical-align:-0.345em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01792em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913142857142857em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span></span></span></span>，这里不详细讲了。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[题解 CF1360E@洛谷 | 1360E@Codeforces 【Polygon】]]></title>
        <id>https://blog.ak-ioi.cf/post/solution-luogu-cf1360e-codeforces-1360e/</id>
        <link href="https://blog.ak-ioi.cf/post/solution-luogu-cf1360e-codeforces-1360e/">
        </link>
        <updated>2020-05-25T05:49:39.000Z</updated>
        <content type="html"><![CDATA[<p>拿到这题一头雾水，找找规律。</p>
<p>按照游戏规则，一个数的右侧和下侧必须有数才可能被大炮发射到这里。</p>
<p>看到样例，发现如果去掉最后一行以及最后一列，剩余的所有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 的右侧或下侧的格子有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>，就是可以完成；反之不能。</p>
<p>大胆猜测：除了最右列与最下行，如果每个 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 右侧或下侧都有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>，则可以完成；有一个 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 右侧下侧均没有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 就不能完成。</p>
<p>考试时直接交了，没有证明正确性，发现 PP 了。现在口胡一个，不是特别严谨，可以画画图试着理解：</p>
<ul>
<li>如果一个 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 右侧有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>，可以通过左侧大炮发射过来。</li>
<li>如果一个 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 下侧有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>，可以通过上方大炮发射过来。</li>
<li>最右列和最下行一定可以达到。</li>
</ul>
<p>类似数学归纳法的思想，证明上面的猜测。</p>
<p>代码：</p>
<pre><code class="language-cpp">//By: Luogu@rui_er(122461)
#include &lt;bits/stdc++.h&gt;
using namespace std;

int T, n, a[55][55];

int main() {
	scanf(&quot;%d&quot;, &amp;T);
	while(T--) {
		scanf(&quot;%d&quot;, &amp;n);
		for(int i=1;i&lt;=n;i++) {
			for(int j=1;j&lt;=n;j++) {
				char c = getchar();
				while(!isdigit(c)) c = getchar();
				a[i][j] = c - '0';
			}
		}
		bool book = true;
		for(int i=1;i&lt;n;i++) {
			for(int j=1;j&lt;n;j++) {
				if(a[i][j] &amp;&amp; !a[i][j+1] &amp;&amp; !a[i+1][j]) {
					book = false;
					break;
				}
			}
			if(!book) break;
		}
		if(book) puts(&quot;YES&quot;);
		else puts(&quot;NO&quot;);
	}
	return 0;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[题解 CF1360D@洛谷 | 1360D@Codeforces 【Buying Shovels】]]></title>
        <id>https://blog.ak-ioi.cf/post/solution-luogu-cf1360d-codeforces-1360d/</id>
        <link href="https://blog.ak-ioi.cf/post/solution-luogu-cf1360d-codeforces-1360d/">
        </link>
        <updated>2020-05-25T05:48:31.000Z</updated>
        <content type="html"><![CDATA[<p>这一题数据不大，想到暴力 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msqrt><mi>n</mi></msqrt></mrow><annotation encoding="application/x-tex">\sqrt{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.04em;vertical-align:-0.23972em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8002800000000001em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathdefault">n</span></span></span><span style="top:-2.76028em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,
-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,
-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,
35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,
-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467
s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422
s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.23972em;"><span></span></span></span></span></span></span></span></span> 求出 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span> 以内的最大因数，然后输出 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>÷</mo><mi>k</mi></mrow><annotation encoding="application/x-tex">n\div k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">÷</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span> 即可。</p>
<p>代码：</p>
<pre><code class="language-cpp">//By: Luogu@rui_er(122461)
#include &lt;bits/stdc++.h&gt;
using namespace std;

int T, n, k;

int main() {
	scanf(&quot;%d&quot;, &amp;T);
	while(T--) {
		scanf(&quot;%d%d&quot;, &amp;n, &amp;k);
		int ma = 1;
		for(int i=sqrt(n);i&gt;=1;i--) {
//			printf(&quot;%d %d %d %d\n&quot;, i, n%i, n/i, k);
			if(n % i != 0) continue;
			int a = i, b = n / i;
			if(a &lt;= k) ma = max(ma, a);
			if(b &lt;= k) ma = max(ma, b);
		}
		printf(&quot;%d\n&quot;, n/ma);
	}
	return 0;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[题解 CF1360C@洛谷 | 1360C@Codeforces 【Similar Pairs】]]></title>
        <id>https://blog.ak-ioi.cf/post/solution-luogu-cf1360c-codeforces-1360c/</id>
        <link href="https://blog.ak-ioi.cf/post/solution-luogu-cf1360c-codeforces-1360c/">
        </link>
        <updated>2020-05-25T05:47:06.000Z</updated>
        <content type="html"><![CDATA[<p>结论题。</p>
<p>自己列了几次找了一下规律，发现有两个数差为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 则必定可以，否则看奇偶数的个数。</p>
<p>找规律思考过程：</p>
<ol>
<li>如果有两个数差为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>，则必有一奇一偶。</li>
<li>奇数个数与偶数个数的奇偶性必然相同。（因为总数是偶数个）</li>
<li>去掉所有差为一的数，剩余的数仍然满足 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn></mrow><annotation encoding="application/x-tex">2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span>。</li>
<li>如果剩余的数中奇数个数和偶数个数均为奇数，则将一对差为一的数拿出用于奇偶数对。（如果没有差为一的数，就不可能完成）</li>
<li>否则将剩余的数按照奇数、偶数分组即可。</li>
</ol>
<p>综上，如果有差为一的数，肯定能完成任务；否则如果奇偶数个数为奇数，不能完成，为偶数可以完成。</p>
<p>代码：</p>
<pre><code class="language-cpp">//By: Luogu@rui_er(122461)
#include &lt;bits/stdc++.h&gt;
using namespace std;

int T, n, a[51];

int main() {
	scanf(&quot;%d&quot;, &amp;T);
	while(T--) {
		scanf(&quot;%d&quot;, &amp;n);
		int odd = 0, even = 0;
		for(int i=1;i&lt;=n;i++) {
			scanf(&quot;%d&quot;, &amp;a[i]);
			if(a[i] &amp; 1) {
				++odd;
			}
			else {
				++even;
			}
		}
		sort(a+1, a+1+n);
		bool book = false;
		for(int i=2;i&lt;=n;i++) {
			if(a[i] - a[i-1] == 1) {
				book = true;
				break;
			}
		}
		if(book) {
			puts(&quot;YES&quot;);
		}
		else if(even % 2 == 0 &amp;&amp; odd % 2 == 0) {
			puts(&quot;YES&quot;);
		}
		else {
			puts(&quot;NO&quot;);
		}
	}
	return 0;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[题解 CF1360B@洛谷 | 1360B@Codeforces 【Honest Coach】]]></title>
        <id>https://blog.ak-ioi.cf/post/solution-luogu-cf1360b-codeforces-1360b/</id>
        <link href="https://blog.ak-ioi.cf/post/solution-luogu-cf1360b-codeforces-1360b/">
        </link>
        <updated>2020-05-25T05:46:08.000Z</updated>
        <content type="html"><![CDATA[<p>这题有点复杂，简化一下问题。</p>
<p>把这些数分为两组，要求一组的最大值与另一组的最小值的差尽量小。</p>
<p>所以我们可以知道，若 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">a_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 与 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mi>j</mi></msub></mrow><annotation encoding="application/x-tex">a_j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.716668em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span> 差最小，则把比 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">a_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 小的分一组，比 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mi>j</mi></msub></mrow><annotation encoding="application/x-tex">a_j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.716668em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span> 大的分一组即可。</p>
<p>为了优化时间，提前排个序即可。</p>
<p>代码：</p>
<pre><code class="language-cpp">//By: Luogu@rui_er(122461)
#include &lt;bits/stdc++.h&gt;
using namespace std;

int T, n, a[51];

int main() {
	scanf(&quot;%d&quot;, &amp;T);
	while(T--) {
		scanf(&quot;%d&quot;, &amp;n);
		for(int i=1;i&lt;=n;i++) {
			scanf(&quot;%d&quot;, &amp;a[i]);
		}
		sort(a+1, a+1+n);
		int mi = 0x3f3f3f3f;
		for(int i=2;i&lt;=n;i++) {
			mi = min(mi, a[i]-a[i-1]);
		}
		printf(&quot;%d\n&quot;, mi);
	}
	return 0;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[题解 CF1360A@洛谷 | 1360A@Codeforces 【Minimal Square】]]></title>
        <id>https://blog.ak-ioi.cf/post/solution-luogu-cf1360a-codeforces-1360a/</id>
        <link href="https://blog.ak-ioi.cf/post/solution-luogu-cf1360a-codeforces-1360a/">
        </link>
        <updated>2020-05-25T05:44:11.000Z</updated>
        <content type="html"><![CDATA[<p>这场 CF div 3 只 AC 了 5 题，水平还有待提高。</p>
<p>此题是一道结论题，找规律发现边长最小为长宽最小值的两倍与最大值的最大值。（是不是看晕了？来看数学式子吧）：</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi><mo>=</mo><mi>max</mi><mo>⁡</mo><mo>{</mo><mn>2</mn><mo>×</mo><mi>min</mi><mo>⁡</mo><mo>{</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo>}</mo><mo separator="true">,</mo><mi>max</mi><mo>⁡</mo><mo>{</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo>}</mo><mo>}</mo></mrow><annotation encoding="application/x-tex">k=\max\{2\times\min\{a, b\}, \max\{a, b\}\}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop">max</span><span class="mopen">{</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop">min</span><span class="mopen">{</span><span class="mord mathdefault">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">b</span><span class="mclose">}</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">max</span><span class="mopen">{</span><span class="mord mathdefault">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">b</span><span class="mclose">}</span><span class="mclose">}</span></span></span></span></span></p>
<p>轻松写出代码：</p>
<pre><code class="language-cpp">//By: Luogu@rui_er(122461)
#include &lt;bits/stdc++.h&gt;
using namespace std;

int main() {
	int T, a, b;
	scanf(&quot;%d&quot;, &amp;T);
	while(T--) {
		scanf(&quot;%d%d&quot;, &amp;a, &amp;b);
		int mi = min(a, b);
		int ma = max(a, b);
		int k = max(ma, 2*mi);
		printf(&quot;%d\n&quot;, k*k);
	} 
	return 0;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[手把手教你免费内网穿透]]></title>
        <id>https://blog.ak-ioi.cf/post/ngrok/</id>
        <link href="https://blog.ak-ioi.cf/post/ngrok/">
        </link>
        <updated>2020-05-07T03:40:55.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>你是否有过很想把内网的网页放到公网让大家也可以访问？你是否很想把搭建的 OJ 放到公网？今天，我来教大家内网穿透的具体操作步骤。</p>
</blockquote>
<h1 id="0-准备工作">0 准备工作</h1>
<p>首先，你需要准备如下材料：</p>
<ul>
<li>一台电脑</li>
<li>一个 localhost 网页（即 <code>localhost:xxx</code> 或 <code>127.0.0.1:xxx</code>）</li>
<li>（选）一个可以解析的域名（国内服务器需要备案）</li>
</ul>
<h1 id="1-注册-ngrok-账号">1 注册 Ngrok 账号</h1>
<p>去 <a href="http://www.ngrok.cc">Ngrok 官网</a>点击注册，注册一个新账号并登录，此时应该看到如下界面：</p>
<figure data-type="image" tabindex="1"><img src="https://cdn.luogu.com.cn/upload/image_hosting/r8aynzvv.png" alt="" loading="lazy"></figure>
<p>其中“开通隧道”处应为 <code>0 / 0 / 0</code>，这里有数字是因为我已经进行了后续操作。</p>
<h1 id="2-开通隧道">2 开通隧道</h1>
<p>点击左侧导航栏“隧道管理→开通隧道”，划到最下面“美国 Ngrok 免费服务器”，点击按钮“立即购买”。当然如果你是土豪选择买一个付费隧道也可以。</p>
<h1 id="3-配置隧道">3 配置隧道</h1>
<p>做完上面的操作后看到如下界面：</p>
<figure data-type="image" tabindex="2"><img src="https://cdn.luogu.com.cn/upload/image_hosting/zqpy4ny1.png" alt="" loading="lazy"></figure>
<p><strong>隧道名称</strong>栏可以随便填，只是方便记忆。<strong>隧道协议</strong>选择 http。<strong>前置域名</strong>填写一个由字母、数字、减号、下划线组成的字符串，是你想要的域名前缀地址，最后你的网站会在这个子域名显示。<strong>本地端口</strong>是你本地的访问地址，一般是 <code>localhost:80 / 127.0.0.1:80</code>，不用改；否则把冒号后面的端口号改成你的端口。<strong>http 验证用户名</strong>和 <strong>http 验证密码</strong>空着即可。</p>
<p>配置完上面的内容，点击“确认添加”即可。</p>
<h1 id="4-设置自定义域名">4 设置自定义域名</h1>
<p>例如这里我的前置域名写的是 <code>akioi</code>，那么一会访问地址就会在前置域名那栏那个网址。<strong>如果您不想把网站放到自己的域名，请忽略此步骤。</strong></p>
<figure data-type="image" tabindex="3"><img src="https://cdn.luogu.com.cn/upload/image_hosting/ummv7g6l.png" alt="" loading="lazy"></figure>
<p>域名类型选择“使用自定义域名”，在自定义域名里面填写你想放到的网址，划到最下面“确认修改”。</p>
<h1 id="5-开通映射服务">5 开通映射服务</h1>
<p>这里作者主要讲解 Windows 与 Linux 的开通方法，其他系统也可以上网百度的到。</p>
<p>回到隧道管理界面，看到</p>
<figure data-type="image" tabindex="4"><img src="https://cdn.luogu.com.cn/upload/image_hosting/op7nzm60.png" alt="" loading="lazy"></figure>
<p>点击“客户端下载”，选择自己的操作系统，下载，将 zip 文件解压。</p>
<h2 id="51-linux">5.1 Linux</h2>
<p>作者本人是用 Linux 虚拟机搭建了一个 OJ，所以使用的是 Linux 的方法。</p>
<p>打开命令行，cd 到解压后的文件夹里，有一个 sunny 文件。此时输入命令 <code>./sunny clientid &lt;xxx&gt;</code>，其中 <code>&lt;xxx&gt;</code> 换成你的隧道 id（见上图），看到 <code>Tunnel Status Online</code> 就代表成功了。</p>
<figure data-type="image" tabindex="5"><img src="https://cdn.luogu.com.cn/upload/image_hosting/a03y6ap4.png" alt="" loading="lazy"></figure>
<h2 id="52-windows">5.2 Windows</h2>
<p>打开 cmd，cd 到文件夹，输入指令 <code>ngrok -authtoken &lt;id&gt; -subdomain &lt;subdomain&gt; &lt;port&gt;</code>，其中 <code>&lt;id&gt;,&lt;subdomain&gt;,&lt;port&gt;</code> 分别是隧道 id、二级域名和端口，判定成功的条件和 Linux 一样。</p>
<h1 id="6-尽情享用吧">6 尽情享用吧！</h1>
<p>作者通过这种方式把虚拟机 <code>http://127.0.0.1:80</code> 映射到了 <code>http://oj.ak-ioi.cf</code>。你也可以在你的自定义域名或默认域名找到你的网站。</p>
<h1 id="7-常见错误">7 常见错误</h1>
<ul>
<li>Q：我配置了隧道为什么访问不了？</li>
<li>A：配置完隧道还要开通服务才能显示哦~</li>
<li>Q：为什么 Tunnel Status 显示 Reconnecting？</li>
<li>A：因为 ngrok 的服务不太稳定，大概等一小会就好了；如果没有好，可以检查一下自己的网络连接。<strong>具体可以看 ngrok 官方 wiki。</strong></li>
<li><strong>Q：官方 wiki 没有包含我的问题怎么办？</strong></li>
<li><strong>A：可以先到洛谷私信 rui_er，如果他也不会可以加入 ngrok QQ 群提问。</strong></li>
</ul>
<h1 id="8-优点缺点">8 优点缺点</h1>
<p>优点有免费、简单；但是缺点是连接可能不太稳定，且延时较大。不过瑕不掩瑜，不影响整体运行。</p>
<p><s>欢迎大家到我的 <a href="http://oj.ak-ioi.cf">OJ</a> 来参观！</s></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[题解 P6503@洛谷 | SP10622@洛谷 | 10622@SPOJ 【[COCI2010-2011#3] DIFERENCIJA】]]></title>
        <id>https://blog.ak-ioi.cf/post/solution-luogu-P6503-luogu-SP10622-SPOJ-10622/</id>
        <link href="https://blog.ak-ioi.cf/post/solution-luogu-P6503-luogu-SP10622-SPOJ-10622/">
        </link>
        <updated>2020-05-01T02:45:39.000Z</updated>
        <content type="html"><![CDATA[<p><s>我绝不会告诉你们这题与 SP10622 是双倍经验的</s>，好了，不扯了，下面开始正文。</p>
<p>这题要求 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><msubsup><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mi>i</mi></mrow><mi>n</mi></msubsup><msub><mi>max</mi><mo>⁡</mo><mrow><mi>i</mi><mo>≤</mo><mi>k</mi><mo>≤</mo><mi>j</mi></mrow></msub><msub><mi>a</mi><mi>k</mi></msub><mo>−</mo><msub><mi>min</mi><mo>⁡</mo><mrow><mi>i</mi><mo>≤</mo><mi>k</mi><mo>≤</mo><mi>j</mi></mrow></msub><msub><mi>a</mi><mi>k</mi></msub></mrow><annotation encoding="application/x-tex">\sum_{i=1}^n\sum_{j=i}^n\max_{i\le k\le j}a_k-\min_{i\le k\le j}a_k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.24011em;vertical-align:-0.43581800000000004em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.804292em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.804292em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mathdefault mtight">i</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.43581800000000004em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop">max</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">≤</span><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mrel mtight">≤</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.9539679999999999em;vertical-align:-0.286108em;"></span><span class="mop"><span class="mop">min</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">≤</span><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mrel mtight">≤</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，看到最小值与最大值，想到单调栈。</p>
<p>单调栈具体可不可以呢？当然是可以的。我们这里同时维护两个单调栈，递增和递减，就可以了。</p>
<p>代码：</p>
<pre><code class="language-cpp">#include&lt;bits/stdc++.h&gt;
using namespace std;
typedef long long ll;
const ll N = 3e5+5;

ll n, a[N], x[N], y[N], S, ans;
stack&lt;ll&gt; mi, ma;

int main()
{
    scanf(&quot;%lld&quot;, &amp;n);
    for(ll i=1;i&lt;=n;i++) scanf(&quot;%lld&quot;, &amp;a[i]);
    mi.push(a[1]);
    ma.push(a[1]);
	x[1] = y[1] = 1;
	ans = S = 0;
    for(ll i=2;i&lt;=n;i++)
	{
        ll tmp = 1;
        while(!mi.empty() &amp;&amp; mi.top() &lt;= a[i])
		{
			S -= mi.top() * x[mi.size()];
			tmp += x[mi.size()];
			mi.pop();
		}
		mi.push(a[i]);
		x[mi.size()] = tmp;
		S += a[i] * tmp;
        tmp = 1;
        while(!ma.empty() &amp;&amp; ma.top() &gt;= a[i])
		{
			S += ma.top() * y[ma.size()];
			tmp += y[ma.size()];
			ma.pop();
		}
		ma.push(a[i]);
		y[ma.size()] = tmp;
		S -= a[i] * tmp;
        ans += S;
    }
    printf(&quot;%lld\n&quot;, ans);
    return 0;
}
</code></pre>
]]></content>
    </entry>
</feed>